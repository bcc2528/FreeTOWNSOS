; INT 97H Timer BIOS

						CPU		386
						BITS	16

						%INCLUDE "UTIL.NSM"
						%INCLUDE "DEF.NSM"
						%INCLUDE "TOWNSDEF.NSM"
						%INCLUDE "IODEF.NSM"


CODE					SEGMENT USE16

INT97H:
						SAVE_WORLD
						MOV		BP,SP

						CMP		AH,BIOSCMD_COMMON_INIT
						JE		INT97H_INIT

						CMP		AH,TIMERBIOS_CMD_00H_REGISTER_TIMER
						JE		INT97H_REGISTER_TIMER
						CMP		AH,TIMERBIOS_CMD_10H_REGISTER_TIMER_UNDOC
						JE		INT97H_REGISTER_TIMER

						CMP		AH,TIMERBIOS_CMD_01H_CANCEL_TIMER
						JE		INT97H_CANCEL_TIMER
						CMP		AH,TIMERBIOS_CMD_11H_CANCEL_TIMER_UNDOC
						JE		INT97H_CANCEL_TIMER

						CMP		AH,TIMERBIOS_CMD_070H_YS_REGISTER_TIMER32
						JE		INT97H_EX_REGISTER_TIMER32

						CMP		AH,TIMERBIOS_CMD_077H_YS_GET_CLOCK
						JE		INT97H_YS_GET_CLOCK


						TSUGARU_DEBUG	; If not implemented yet, break.


INT97H_EXIT:
						RESTORE_WORLD
						CLC
						IRET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TICK_COUNT32			DD		0

CLOCK_10MS:				DB		0
CLOCK_SEC:				DB		0
CLOCK_MIN:				DB		0
CLOCK_HOUR:				DB		0
CLOCK_DAY:				DB		1
CLOCK_MONTH:			DB		1
CLOCK_YEAR:				DW		0

CLOCK_DAY_OF_WEEK		DB		0

DAYS_OF_MONTH:			DB		31,28,31,30,31,30,31,31,30,31,30,31


STRUC					TIMER_PARAMETER_BLOCK
TIMER_MODE				RESB	1
						RESB	1
TIMER_CALLBACK			RESD	1
TIMER_INTERVAL			RESD	1
TIMER_TICKS				RESD	1	; When TICKS==INTERVAL, call interval.
TIMER_COUNT				RESD	1

TIMER_EX_CALL32PROC		RESD	1
TIMER_EX_PROC32			RESD	1
						RESW	1
TIMER_EX_DS				RESW	1
TIMER_EX_ES				RESW	1
TIMER_EX_GS				RESW	1
TIMER_EX_FS				RESW	1
ENDSTRUC

NUM_TIMERS:				EQU		4
TIMER_PARAMS:			DB		TIMER_PARAMETER_BLOCK_size*NUM_TIMERS dup(0FFh)
TIMER_PARAMS_END:

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT40H_DATA_BLOCK:
						DB		0,0
						DW		INT40H_HANDLER
						DW		0

INT40H_HANDLER:
						SAVE_WORLD


						IN		AL,60H

						PUSH	AX
						TEST	AL,1
						JE		INT40H_NOT_TM0OUT

						; TM0OUT

						; Process registered timers

						MOV		SI,TIMER_PARAMS
INT40H_HANDLER_TIMER_CALLBACK_LOOP:
						CMP		BYTE CS:[SI],0FFh
						JE		INT40H_HANDLER_TIMER_CALLBACK_NEXT

						INC		DWORD CS:[SI+TIMER_TICKS]
						MOV		EAX,CS:[SI+TIMER_TICKS]
						CMP		EAX,CS:[SI+TIMER_INTERVAL]
						JB		INT40H_HANDLER_TIMER_CALLBACK_NEXT

						XOR		EAX,EAX
						MOV		CS:[SI+TIMER_TICKS],EAX
						INC		DWORD CS:[SI+TIMER_COUNT]

						TEST	BYTE CS:[SI],2
						JNE		INT40H_HANDLER_TIMER_CALLBACK_COUNT_ONLY	; Jump if count-only mode.

						PUSH	SI
						CALL	FAR [CS:SI+TIMER_CALLBACK]
						POP		SI

INT40H_HANDLER_TIMER_CALLBACK_COUNT_ONLY:
						TEST	BYTE CS:[SI],1
						JE		INT40H_HANDLER_TIMER_CALLBACK_NEXT
						MOV		BYTE CS:[SI],0FFh	; Cancel after the first call

INT40H_HANDLER_TIMER_CALLBACK_NEXT:
						ADD		SI,TIMER_PARAMETER_BLOCK_size
						CMP		SI,TIMER_PARAMS_END
						JB		INT40H_HANDLER_TIMER_CALLBACK_LOOP

						; Update Calender time.

						INC		DWORD CS:[TICK_COUNT32]

						; Update clock.

						INC		BYTE CS:[CLOCK_10MS]
						CMP		BYTE CS:[CLOCK_10MS],100
						JB		INT40H_CLOCK_DONE

						MOV		BYTE CS:[CLOCK_10MS],0
						INC		BYTE CS:[CLOCK_SEC]
						CMP		BYTE CS:[CLOCK_SEC],60
						JB		INT40H_CLOCK_DONE

						MOV		BYTE CS:[CLOCK_SEC],0
						INC		BYTE CS:[CLOCK_MIN]
						CMP		BYTE CS:[CLOCK_MIN],60
						JB		INT40H_CLOCK_DONE

						MOV		BYTE CS:[CLOCK_SEC],0
						INC		BYTE CS:[CLOCK_MIN]
						CMP		BYTE CS:[CLOCK_MIN],60
						JB		INT40H_CLOCK_DONE

						MOV		BYTE CS:[CLOCK_MIN],0
						INC		BYTE CS:[CLOCK_HOUR]
						CMP		BYTE CS:[CLOCK_HOUR],24
						JB		INT40H_CLOCK_DONE

						MOV		BYTE CS:[CLOCK_HOUR],0

						INC		BYTE CS:[CLOCK_DAY_OF_WEEK]
						CMP		BYTE CS:[CLOCK_DAY_OF_WEEK],6
						JBE		DAY_OF_WEEK_DONE
						MOV		BYTE CS:[CLOCK_DAY_OF_WEEK],0
DAY_OF_WEEK_DONE:

						INC		BYTE CS:[CLOCK_DAY]
						MOVZX	BX,BYTE CS:[CLOCK_MONTH]
						DEC		BX
						MOV		AL,CS:[DAYS_OF_MONTH+BX]
						CMP		AL,BYTE CS:[CLOCK_DAY]
						JAE		INT40H_CLOCK_DONE

						MOV		BYTE CS:[CLOCK_DAY],1
						INC		BYTE CS:[CLOCK_MONTH]
						CMP		BYTE CS:[CLOCK_MONTH],12
						JBE		INT40H_CLOCK_DONE

						MOV		BYTE CS:[CLOCK_MONTH],1
						INC		BYTE CS:[CLOCK_YEAR]
						CALL	LEAP_YEAR_ADJUSTMENT
INT40H_CLOCK_DONE:


INT40H_NOT_TM0OUT:
						POP		AX
						PUSH	AX
						TEST	AL,2
						JE		INT40H_NOT_TM1OUT

						; TM1OUT  What am I supposed to do?

INT40H_NOT_TM1OUT:
						POP		AX

						SHR		AL,2
						OR		AL,81H

						OUT		60H,AL

						RESTORE_WORLD
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT40H_EX_CALL_32PROC:
						TSUGARU_DEBUG
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

LEAP_YEAR_ADJUSTMENT:
						MOV		BYTE CS:[DAYS_OF_MONTH+1],28

						MOV		AX,CS:[CLOCK_YEAR]
						XOR		DX,DX
						MOV		BX,100
						DIV		BX

						OR		DX,DX
						JE		NOT_LEAP_YEAR

						AND		DX,3
						JNE		NOT_LEAP_YEAR

						; Is Leap Year.
						INC		BYTE CS:[DAYS_OF_MONTH+1]

NOT_LEAP_YEAR:
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT97H_INIT:
						CLI


						CALL	READ_RTC
						; Output  EBX=HHMMSS, ECX=YYMMDDW
						; EAX,EDX destroyed.

						MOV		AL,BL	; SEC in BCD
						CALL	BCD2BIN_AL
						MOV		CS:[CLOCK_SEC],AL

						MOV		AL,BH	; MIN in BCD
						CALL	BCD2BIN_AL
						MOV		CS:[CLOCK_MIN],AL

						SHR		EBX,16
						MOV		AL,BL
						AND		AL,3FH
						CALL	BCD2BIN_AL
						MOV		CS:[CLOCK_HOUR],AL


						MOV		AL,CL
						AND		AL,0FH
						MOV		CS:[CLOCK_DAY_OF_WEEK],AL

						SHR		ECX,4
						MOV		AL,CL
						CALL	BCD2BIN_AL
						MOV		CS:[CLOCK_DAY],AL

						MOV		AL,CH
						CALL	BCD2BIN_AL
						MOV		CS:[CLOCK_MONTH],AL

						SHR		ECX,16
						MOV		AL,CL
						SHR		AL,4
						MOV		AH,10
						MUL		AH

						AND		CL,0FH
						MOVZX	CX,CL
						ADD		AX,CX
						MOV		CS:[CLOCK_YEAR],AX


						PUSH	CS
						POP		DS
						MOV		[INT40H_DATA_BLOCK+4],CS
						MOV		DI,INT40H_DATA_BLOCK
						MOV		DL,0
						XOR		AH,AH
						INT		0AEH

						PUSH	EAX	; Make buffer in STACK
						MOV		DI,SS
						MOV		DS,DI
						MOV		DI,SP
						MOV		AH,03H	; Get INT-Enabled Flags
						INT		0AEH

						MOV		EAX,DS:[DI]
						OR		EAX,INTMANBIOS_INT00_FLAG
						MOV		DS:[DI],EAX

						MOV		AH,02H	; Set INT-Enabled Flags
						INT		0AEH

						POP		EAX

						; 10ms interval timer.
						MOV		AL,36H
						OUT		0046H,AL
						MOV		AL,00H
						OUT		0040H,AL
						MOV		AL,0CH
						OUT		0040H,AL

						MOV		AL,81H
						OUT		60H,AL

						JMP		INT97H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT97H_REGISTER_TIMER:
						CALL	INT97H_FIND_AVAILABLE_TIMER
						JB		INT97H_REGISTER_TIMER_NOT_AVAILABLE

						CLI		; Just in case
						MOV		AX,[DI+TIMER_MODE]
						MOV		CS:[SI+TIMER_MODE],AX
						MOV		EAX,[DI+TIMER_CALLBACK]
						MOV		CS:[SI+TIMER_CALLBACK],EAX
						MOV		EAX,[DI+TIMER_INTERVAL]
						ROL		EAX,16		; For some reason, high word and low word reversed.
						MOV		CS:[SI+TIMER_INTERVAL],EAX
						XOR		EAX,EAX
						MOV		CS:[SI+TIMER_COUNT],EAX
						MOV		CS:[SI+TIMER_TICKS],EAX

						MOV		DWORD CS:[SI+TIMER_EX_CALL32PROC],0
						MOV		DWORD CS:[SI+TIMER_EX_PROC32],0
						MOV		WORD CS:[SI+TIMER_EX_PROC32+4],0
						MOV		DWORD CS:[SI+TIMER_EX_DS],0
						MOV		DWORD CS:[SI+TIMER_EX_GS],0

						MOV		BYTE [BP+SAVED_EAX+1],0
						MOV		BYTE [BP+SAVED_EAX],CL
						JMP		INT97H_EXIT

INT97H_REGISTER_TIMER_NOT_AVAILABLE:
						MOV		BYTE [BP+SAVED_EAX+1],3
						JMP		INT97H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT97H_FIND_AVAILABLE_TIMER:
						MOV		SI,TIMER_PARAMS
						XOR		CX,CX

INT97H_FIND_TIMER_LOOP:
						CMP		BYTE CS:[SI],0FFH
						JE		INT97H_FOUND_TIMER	; If JE, CF is also zero.
						ADD		SI,TIMER_PARAMETER_BLOCK_size

						INC		CX
						CMP		CX,NUM_TIMERS
						JB		INT97H_FIND_TIMER_LOOP
						STC

INT97H_FOUND_TIMER:
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; INT 97H Extension
; AH=70H
; AL=Timer Mode
; (HIWORD EAX):EBX=Protected-mode INT proc.
; ECX=Interval
; EDX=Real-Mode Call Back Proc CS|IP
; ESI=ES|DS
; EDI=GS|FS
INT97H_EX_REGISTER_TIMER32:
						CALL	INT97H_FIND_AVAILABLE_TIMER
						JB		INT97H_REGISTER_TIMER_NOT_AVAILABLE

						CLI		; Just in case

						MOV		AX,CS
						SHL		EAX,16
						MOV		AX,INT40H_EX_CALL_32PROC
						MOV		CS:[SI+TIMER_CALLBACK],EAX

						XOR		EAX,EAX
						MOV		CS:[SI+TIMER_COUNT],EAX
						MOV		CS:[SI+TIMER_TICKS],EAX

						MOV		EAX,[BP+SAVED_EAX]
						MOV		EDX,[BP+SAVED_EDX]
						MOV		EBX,[BP+SAVED_EBX]
						MOV		ECX,[BP+SAVED_ECX]

						MOVZX	AX,AL
						MOV		CS:[SI+TIMER_MODE],AX

						MOV		CS:[SI+TIMER_INTERVAL],ECX

						MOV		CS:[SI+TIMER_EX_CALL32PROC],EDX

						MOV		CS:[SI+TIMER_EX_PROC32],EBX
						ROR		EAX,16
						MOV		CS:[SI+TIMER_EX_PROC32+4],AX

						MOV		EAX,[BP+SAVED_ESI]
						MOV		CS:[SI+TIMER_EX_DS],EAX
						MOV		EAX,[BP+SAVED_EDI]
						MOV		CS:[SI+TIMER_EX_GS],EDI

						MOV		BYTE [BP+SAVED_EAX+1],0
						MOV		BYTE [BP+SAVED_EAX],CL

						JMP		INT97H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT97H_CANCEL_TIMER:
						MOV		BYTE [BP+SAVED_EAX+1],2	; Tentative

						MOVZX	AX,BYTE [BP+SAVED_EAX]
						CMP		AX,NUM_TIMERS
						JAE		INT97H_EXIT

						MOV		DX,TIMER_PARAMETER_BLOCK_size
						MUL		DX
						MOV		BX,AX
						CMP		BYTE CS:[TIMER_PARAMS+BX],0FFh
						JE		INT97H_EXIT

						MOV		BYTE [BP+SAVED_EAX+1],0
						MOV		BYTE CS:[TIMER_PARAMS+BX],0FFh

						JMP		INT97H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT97H_YS_GET_CLOCK:
						MOV		EAX,CS:[CLOCK_10MS]
						MOV		[BP+SAVED_EAX],EAX
						MOV		EAX,CS:[CLOCK_DAY]
						MOV		[BP+SAVED_EBX],EAX
						MOV		CL,CS:[CLOCK_DAY_OF_WEEK]
						MOV		[BP+SAVED_ECX],CL
						JMP		INT97H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Output  EBX=HHMMSS, ECX=YYMMDDW
; EAX,EDX destroyed.
READ_RTC:
						; Wait for RTC Busy->Ready flip
READ_RTC_WAIT_RTC_BUSY:
						IN		AL,70H
						TEST	AL,80H
						JNE		READ_RTC_WAIT_RTC_BUSY
READ_RTC_WAIT_RTC_READY:
						IN		AL,70H
						TEST	AL,80H
						JE		READ_RTC_WAIT_RTC_BUSY

						; I have 244us to read the RTC

						XOR		EBX,EBX
						XOR		ECX,ECX

						MOV		DL,5

READ_RTC_MIN_SEC_HOUR_LOOP:
						MOV		AL,80H
						OUT		IO_RTC_COMMAND,AL
						MOV		AL,DL
						OUT		IO_RTC_DATA,AL	  ; Reg=DL
						MOV		AL,81H
						OUT		IO_RTC_COMMAND,AL ; Address Latch
						MOV		AL,80H
						OUT		IO_RTC_COMMAND,AL

						MOV		AL,84H
						OUT		IO_RTC_COMMAND,AL	; Read
						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL
						IN		AL,IO_RTC_DATA

						AND		EAX,0FH
						SHL		EBX,4
						OR		EBX,EAX

						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL

						DEC		DL
						JGE		READ_RTC_MIN_SEC_HOUR_LOOP


						MOV		DL,12
READ_RTC_DATE_LOOP:
						MOV		AL,80H
						OUT		IO_RTC_COMMAND,AL
						MOV		AL,DL
						OUT		IO_RTC_DATA,AL	  ; Reg=DL
						MOV		AL,81H
						OUT		IO_RTC_COMMAND,AL ; Address Latch
						MOV		AL,80H
						OUT		IO_RTC_COMMAND,AL

						MOV		AL,84H
						OUT		IO_RTC_COMMAND,AL	; Read
						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL
						IN		AL,IO_RTC_DATA

						AND		EAX,0FH
						SHL		ECX,4
						OR		ECX,EAX

						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL

						DEC		DL
						CMP		DL,6
						JGE		READ_RTC_DATE_LOOP

						XOR		AL,AL
						OUT		IO_RTC_COMMAND,AL

						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

						%INCLUDE "LIB.NSM"
