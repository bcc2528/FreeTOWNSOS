; Accidentally found difference between 486 and Pentium.
;
; LGDT instruction only updates GDT, but linear base address, segment limit, and other properties cached in
; each segment selectors do not change.  Therefore, unless I don't use a far jump/call, it is safe to
; first transition to the protected mode, and then update GDT with LGDT.
;
; In Pentium, segment properties cached in each segment selectors apparently reset upon LGDT.
; Therefore, if I first transition to the protected mode, it is too late to update GDT with LGDT.
; As soon as LGDT is called, CS cache is reset, and the value of CS from the real mode is most likely
; not a valid code segment, and the program crashes.
;
; Thanks WINDY and Type.D for testing and confirming this finding with FM TOWNS II HC.



GDT_BACKUP				DW		0
						DD		0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GDT_INFO				DW		GDT_END-GDT_BEGIN-1
GDT_ADDR				DD		0	; Sounds like it is a linear address

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

GDT_BEGIN				DD		0,0			; Table 0.  Not used?
						; It must make a flat 32-bit descriptor.
						; https://wiki.osdev.org/Unreal_Mode
; Selector 08H
CS16_DESC				DB		0FFH,0FFH	; Segment Limit (0-15)
CS16_BASE_LOW			DB		0,0,0		; Base Address 0-23
						DB		10011010B	; P=1, DPL=00, S=1, TYPE=01AH
						DB		00000000B	; G=0(max 12MB), DB=0(16-bit), (Unused)=0, A=0, LIMIT 16-19=0000
CS16_BASE_HIGH			DB		0			; Base Address 24-31

; Selector 10H
CS32_DESC				DB		0FFH,0FFH	; Segment Limit (0-15)
CS32_BASE_LOW			DB		0,0,0		; Base Address 0-23
						DB		10011010B	; P=1, DPL=00, S=1, TYPE=01AH
						DB		11000011B	; G=1(max 4GB), DB=1(32-bit), (Unused)=0, A=0, LIMIT 16-19=0011
CS32_BASE_HIGH			DB		0			; Base Address 24-31

DS_DESC					DB		0FFH,0FFH	; Segment Limit (0-15)
DS_BASE_LOW				DB		0,0,0		; Base Address 0-23
						DB		10010010B	; P=1, DPL=00, S=1, TYPE=012H
						DB		00000000B	; G=0(max 12MB), DB=0(32-bit), (Unused)=0, A=0, LIMIT 16-19=0000
DS_BASE_HIGH			DB		0			; Base Address 24-31

ALL_DESC				DB		0FFH,0FFH	; Segment Limit (0-15)
						DB		0,0,0		; Base Address 0-23
						DB		10010010B	; P=1, DPL=00, S=1, TYPE=012H
						DB		11001111B	; G=1(max 4GB), DB=1(32-bit), (Unused)=0, A=0, LIMIT 16-19=0011
						DB		0			; Base Address 24-31
GDT_END:



SEL_CS16				EQU		08H
SEL_CS32				EQU		10H
SEL_DS16				EQU		18H
SEL_ALLMEM				EQU		20H


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; To be safe, it should be called long before used.
PHYSMEM_TRANSFER_INITIALIZE:
						MOV		CS:[RDHIGH_HOMECOMING_CS],CS	; Prepare to come home.
						RET




; Need .386p

; Input
;   ESI      Source Physical Address
;   EDI      Destination Physical Address
;   ECX      Transfer size

PHYSMEM_TRANSFER:
						PUSH	ES
						PUSH	DS
						PUSH	EDI
						PUSH	ESI
						PUSH	EDX
						PUSH	ECX
						PUSH	EBX
						PUSH	EAX
						PUSHF

						MOV		CS:[RDHIGH_HOMECOMING_CS],CS	; Prepare to come home.

						MOV		BX,CS
						MOVZX	EBX,BX
						SHL		EBX,4	; Make it a linear address

						; Selector 08H
						MOV		CS:[CS16_BASE_LOW],BX
						ROR		EBX,16
						MOV		CS:[CS16_BASE_LOW+2],BL
						MOV		CS:[CS16_BASE_HIGH],BH
						ROR		EBX,16

						; Selector 10H
						MOV		CS:[CS32_BASE_LOW],BX
						ROR		EBX,16
						MOV		CS:[CS32_BASE_LOW+2],BL
						MOV		CS:[CS32_BASE_HIGH],BH
						ROR		EBX,16

						; Selector 18H
						MOV		CS:[DS_BASE_LOW],BX
						ROR		EBX,16
						MOV		CS:[DS_BASE_LOW+2],BL
						MOV		CS:[DS_BASE_HIGH],BH


						MOV		AX,CS
						MOVZX	EAX,AX
						SHL		EAX,4
						ADD		EAX,GDT_BEGIN
						MOV		CS:[GDT_ADDR],EAX


						CLI			; Do not use stack from this point on.

						SGDT	CS:[GDT_BACKUP]
						LGDT	CS:[GDT_INFO]

						MOV		EDX,CR0
						OR		DL,1
						MOV		CR0,EDX

						; https://wiki.osdev.org/Unreal_Mode suggest one jump "to tell 386/486 not to crash".
 						DB		0EAH ; JMPF
						DW		RDHIGH_JMP1
						DW		SEL_CS16
RDHIGH_JMP1:

						; In Selector 08H   16-bit operand size and 16-bit address size.

 						DB		0EAH ; JMPF
						DW		RDHIGH_JMP2
						DW		SEL_CS32

						; Jump up to 32-bit operand size and 32-bit address size for transfer.

RDHIGH_JMP2:

						BITS	32

						; Quote from https://www.felixcloutier.com/x86/lgdt:lidt
						; They are the only instructions that directly load a linear address 
						; (that is, not a segment-relative address) and a limit in protected mode.
						MOV		AX,SEL_ALLMEM	; Descriptor 2 maps entire 4GB
						MOV		DS,AX
						MOV		ES,AX

						REP		MOVSB

						MOV		AX,SEL_DS16	; Clear G flag.
						MOV		DS,AX
						MOV		ES,AX

 						DB		0EAH ; JMPF
						DD		RDHIGH_JMP3
						DW		SEL_CS16

						; Come down to 16-bit operand size/address size to be ready to jump back to real-mode CS.

RDHIGH_JMP3:
						BITS	16

						AND		DL,0FEH
						MOV		CR0,EDX

 						DB		0EAH ; JMPF
						DW		RDHIGH_JMP4
RDHIGH_HOMECOMING_CS:	DW		0

RDHIGH_JMP4:
						LGDT	CS:[GDT_BACKUP]

						POPF
						POP		EAX
						POP		EBX
						POP		ECX
						POP		EDX
						POP		ESI
						POP		EDI
						POP		DS
						POP		ES
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
