FDMODE_FM_MFM_MASK		EQU		0x00800000 ; DL|BX on AH=00h
FDMODE_TYPE_MASK		EQU		0x00300000
FDMODE_SECT_LEN_MASK	EQU		0x00030000
FDMODE_NUM_HEAD_MASK	EQU		0x0000FF00
FDMODE_NUM_SECT_MASK	EQU		0x000000FF

FDC_CTL_CLKSEL 			EQU		020h
FDC_CTL_MOTOR  			EQU		050h	; FM TOWNS Technical Databook p.774 tells external drive mortor is controlled by bit 6.
FDC_CTL_SIDE   			EQU		004h
FDC_CTL_MFM    			EQU		002h
FDC_CTL_IRQEN  			EQU		001h

FDC_CTL_SIDE_SHIFT		EQU		2

FDC_SPD_MODE_B 			EQU		080h
FDC_SPD_360RPM 			EQU		040h
FDC_SPD_INUSE  			EQU		010h

INT93H_FD_MOTOR_OFF_TIMEOUT		EQU		300		; Times 10ms=3000ms to turn off motors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; FOR DEBUGGING ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INT93H_FD_LAST_STATUS_BYTE	DB		0
INT93H_FD_LAST_CONTROL_BYTE	DB		0
INT93H_FD_LAST_SPEED_BYTE	DB		0
INT93H_FD_DMA_COUNT_BEFORE	DW		0
INT93H_FD_DMA_COUNT_AFTER	DW		0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93_FD_MODE			DD		DISKBIOS_FD_MODE_1232K,DISKBIOS_FD_MODE_1232K,DISKBIOS_FD_MODE_1232K,DISKBIOS_FD_MODE_1232K
INT93_FD_CURRENT_CYL	DB		0,0,0,0
INT93_FD_SEEK_STEP		DB		1,1,1,1
INT93_FD_MOTOR			DB		0	; Looks like all motors are controlled together.

INT93_FD_LAST_DRV_CTRL_REG	DB		0

INT93_FD_MOTOR_OFF_TIMER	DW	0	; When timer counts down from 1 to 0, it will stop the motor.

; Must check FREADY flag every 1 second and set the flag if FREADY=0
INT93_FD_DISKCHANGE		DB		0	; bit0 A drive changed  bit 1 B drive changed (detected FREADY=0)
INT93H_FD_IS_BUSY		DB		0
INT93H_READ_OR_WRITE:	DW		0
INT93H_CHECK_DISKCHANGE_COUNT	DB	0		; Once every 100*10ms


%macro					OUT_DRV_CTRL	0
						MOV		CS:[INT93_FD_LAST_DRV_CTRL_REG],AL
						MOV		DX,IO_FDC_DRIVE_CONTROL
						OUT		DX,AL
%endmacro


INT93H_FD:
						MOV		BYTE CS:[INT93H_FD_IS_BUSY],1	; Will be reset on exit INT 93H
						MOV		WORD CS:[INT93_FD_MOTOR_OFF_TIMER],INT93H_FD_MOTOR_OFF_TIMEOUT
						MOV		BYTE CS:[ERROR_CODE],80H
						MOV		WORD CS:[ERROR_DETAIL],0FFFFh
						MOV		BYTE CS:[INT46H_DID_COME_IN],0

						CMP		AH,DISKBIOS_CMD_YS_CHECK_DISK_CHANGE
						JE		INT93H_FD_CHECK_DISK_CHANGE

						CMP		AH,0DH
						JA		INT93H_FD_EXIT
						MOVZX	BX,AH
						SHL		BX,1
						JMP		[CS:BX+INT93H_FD_JUMPTABLE]	; Why JMP?  Because I can save two bytes of the stack.

INT93H_FD_EXIT_NO_ERROR:
						MOV		BYTE CS:[INT93H_FD_IS_BUSY],0
						JMP		INT93H_EXIT_NO_ERROR

INT93H_FD_EXIT:
						MOV		BYTE CS:[INT93H_FD_IS_BUSY],0
						JMP		INT93H_EXIT

INT93H_FD_JUMPTABLE:	DW		INT93H_FD_SET_DRIVE_MODE     ; 00H
						DW		INT93H_FD_GET_DRIVE_MODE     ; 01H
						DW		INT93H_FD_GET_DRIVE_STATUS   ; 02H
						DW		INT93H_FD_RESTORE            ; 03H
						DW		INT93H_FD_SEEK               ; 04H
						DW		INT93H_FD_READ               ; 05H
						DW		INT93H_FD_WRITE              ; 06H
						DW		INT93H_FD_CHECK_SECTOR       ; 07H
						DW		INT93H_FD_EXIT               ; 08H (For HDD only)
						DW		INT93H_FD_READADDR           ; 09H
						DW		INT93H_FD_FORMAT             ; 0AH
						DW		INT93H_FD_EXIT               ; 0BH
						DW		INT93H_FD_EXIT               ; 0CH
						DW		INT93H_FD_GET_ERROR_DETAIL   ; 0DH


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_SET_DRIVE_MODE:
						MOV		BYTE CS:[ERROR_CODE],DISKBIOS_ERROR_WRONG_DEVICE_OR_MODE
						MOV		AL,[BP+SAVED_EAX]
						AND		AL,0FH
						CMP		AL,3
						JA		INT93H_FD_EXIT

						SHL		EDX,16
						MOV		BX,DX

						MOV		EBX,EDX
						AND		EBX,FDMODE_TYPE_MASK
						CMP		EBX,0x00300000
						JE		INT93H_FD_EXIT

						SHL		AL,2
						MOVZX	DI,AL
						MOV		CS:[INT93_FD_MODE+DI],EDX

						JMP		INT93H_FD_EXIT_NO_ERROR


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_GET_DRIVE_MODE:
						MOV		BYTE CS:[ERROR_CODE],DISKBIOS_ERROR_WRONG_DEVICE_OR_MODE
						MOV		AL,[BP+SAVED_EAX]
						AND		AL,0FH
						CMP		AL,3
						JA		INT93H_FD_EXIT

						SHL		AL,2
						MOVZX	DI,AL
						MOV		EDX,CS:[INT93_FD_MODE+DI],

						MOV		[BP+SAVED_EBX],DX
						SHR		EDX,16
						MOV		[BP+SAVED_EDX],DL

						MOV		BYTE CS:[ERROR_CODE],0
						JMP		INT93H_FD_EXIT_NO_ERROR


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_GET_DRIVE_STATUS:
						JMP		INT93H_FD_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_RESTORE:
						MOV		AL,[BP+SAVED_EAX]
						AND		AL,3
						CALL	INT93H_FD_SELECT_DRIVE_IN_USE
						CALL	INT93H_FD_MOTOR_ON_WAIT_AND_SET_FLAG

						XOR		DH,DH	; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQEN
						CALL	INT93H_FD_WAIT_FDC_READY

						MOV		AL,FDCCMD_RESTORE_HEAD_UNLOAD
						MOV		DX,IO_FDC_COMMAND
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_INT46

						MOV		AL,[BP+SAVED_EAX]
						AND		AL,3
						XOR		DH,DH	; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						MOVZX	BX,BYTE [BP+SAVED_EAX]
						AND		BL,3
						MOV		BYTE CS:[INT93_FD_CURRENT_CYL+BX],0

						MOV		AL,[BP+SAVED_EAX]
						CALL	INT93H_FD_SELECT_DRIVE_NOT_IN_USE

						JMP		INT93H_FD_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_SEEK:
						MOV		AL,[BP+SAVED_EAX]
						MOV		CX,[BP+SAVED_ECX]
						CALL	INT93H_FD_SEEK_INTERNAL

						MOV		DX,IO_FDC_STATUS
						IN		AL,DX

						TEST	AL,010H
						JNE		INT93H_FD_SEEK_ERROR
						TEST	AL,080H
						JNE		INT93H_FD_DRIVE_NOT_READY

						JMP		INT93H_FD_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input
;   AL Drive (High-bits will be ignored)
;   CL Cylinder
; All registers preserved.
INT93H_FD_SEEK_INTERNAL:
						PUSH	DX
						PUSH	BX

						CALL	INT93H_FD_WAIT_FDC_READY
						CLI

						MOV		BYTE CS:[INT46H_DID_COME_IN],0

						CALL	INT93H_FD_SELECT_DRIVE_IN_USE
						CALL	INT93H_FD_MOTOR_ON_WAIT_AND_SET_FLAG
						XOR		DH,DH ; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						PUSH	AX

						AND		AL,3
						MOVZX	BX,AL
						MOV		AL,CS:[INT93_FD_CURRENT_CYL+BX]
						MOV		DX,IO_FDC_CYLINDER
						OUT		DX,AL

						MOV		AL,CL
						MOV		AH,CS:[INT93_FD_SEEK_STEP+BX]
						MUL		AH
						MOV		DX,IO_FDC_DATA
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_FDC_READY

						POP		AX
						PUSH	AX

						STI
						XOR		DH,DH ; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQEN

						MOV		AL,FDCCMD_SEEK
						MOV		DX,IO_FDC_COMMAND
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_INT46

						MOV		DX,IO_FDC_CYLINDER
						IN		AL,DX

						POP		BX		; BX is incomng AX.
						PUSH	BX

						AND		BX,3
						MOV		CS:[INT93_FD_CURRENT_CYL+BX],AL

						POP		AX
						CALL	INT93H_FD_SELECT_DRIVE_NOT_IN_USE

						XOR		DH,DH ; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS
						POP		BX
						POP		DX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input AH=05 AL=Device CX=Cylinder  DH=Head  DL=Sector  BX=number of sectors  DS:DI=Buffer
INT93H_FD_READ:
						MOV		BX,[BP+SAVED_DS]
						MOV		DS,BX
						MOV		DI,[BP+SAVED_EDI]

						MOV		BX,[BP+SAVED_EBX]
						MOV		CX,[BP+SAVED_ECX]
						MOV		DX,[BP+SAVED_EDX]

						AND		BX,BX
						JE		INT93H_FD_EXIT_NO_ERROR

						MOV		WORD CS:[INT93H_READ_OR_WRITE],INT93H_FD_READ_INTERNAL
						; Fall down to INT93H_FD_RW_CYLINDER_LOOP


INT93H_FD_RW_CYLINDER_LOOP:
						MOV		AX,[BP+SAVED_EAX]
						CALL	INT93H_FD_SEEK_INTERNAL

INT93H_FD_RW_SECTOR_LOOP:
						; Loop until Record Not Found && 0<BX
						PUSH	BX
						PUSH	CX
						PUSH	DX
						MOV		AL,[BP+SAVED_EAX]
						CALL	[CS:INT93H_READ_OR_WRITE]
						POP		DX
						POP		CX
						POP		BX

						TEST	AL,IOERR_NOT_READY
						JNE		INT93H_FD_DRIVE_NOT_READY
						TEST	AL,IOERR_WRITE_PROTECTED
						JNE		INT93H_FD_WRITE_PROTECTED
						TEST	AL,IOERR_DELETED_DATA
						JNE		INT93H_FD_DELETED_DATA_ERROR
						TEST	AL,IOERR_RECORD_NOT_FOUND
						JNE		INT93H_FD_RECORD_NOT_FOUND_ERROR
						TEST	AL,IOERR_CRC
						JNE		INT93H_FD_CRC_ERROR
						TEST	AL,IOERR_LOST_DATA
						JNE		INT93H_FD_LOST_DATA
						TEST	AL,IOERR_DATA_REQUEST+IOERR_BUSY
						JNE		INT93H_FD_UNKNOWN_ERROR

						; One sector was read/written with no error.
						MOV		AL,[BP+SAVED_EAX]
						CALL	INT93H_FD_SECTLEN_FROM_DRV
						ADD		DI,AX
						DEC		BX
						JE		INT93H_FD_EXIT_NO_ERROR

						INC		DL	; Next Sector
						MOV		AL,[BP+SAVED_EAX]
						CALL	INT93H_FD_SECTPERTRK_FROM_DRV
						CMP		DL,AL
						JLE		INT93H_FD_RW_SECTOR_LOOP

						MOV		DL,1
						INC		DH	; Next Side
						AND		DH,1
						JNE		INT93H_FD_RW_SECTOR_LOOP

						INC		CL	; Next Cylinder
						JMP		INT93H_FD_RW_CYLINDER_LOOP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input    Same as INT 05H
; Output   AL FDC Status
;          Destroys SI
INT93H_FD_READ_INTERNAL:
						PUSH	DX
						PUSH	CX
						PUSH	BX
						PUSH	AX

						CALL	INT93H_FD_SECTLEN_FROM_DRV
						MOV		SI,AX

						POP		AX
						PUSH	AX

						CALL	INT93H_FD_WAIT_FDC_READY
						CLI

						MOV		BYTE CS:[INT46H_DID_COME_IN],0

						CALL	INT93H_FD_SELECT_DRIVE_IN_USE
						CALL	INT93H_FD_MOTOR_ON_WAIT_AND_SET_FLAG

						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						CLI

						XCHG	BX,DX		; Now BH=Head  BL=Sector

						PUSH	CX
						MOV		DX,DS
						MOVZX	EDX,DX
						SHL		EDX,4
						MOVZX	EDI,DI
						ADD		EDX,EDI
						MOV		AL,DMA_CHANNEL_FD
						MOV		CX,SI
						CALL	INT93H_DMA_SETUP_READ
						POP		CX

						MOV		AL,CL
						MOV		DX,IO_FDC_CYLINDER
						OUT		DX,AL

						MOV		AL,BL
						MOV		DX,IO_FDC_SECTOR
						OUT		DX,AL

						STI
						XCHG	BX,DX		; Restore sector and side
						CALL	INT93H_FD_DRIVE_CONTROL_IRQEN

						CALL	INT93H_FD_WAIT_FDC_READY


						; For debugging only>>
						MOV		DX,IO_DMA_COUNT_LOW
						IN		AX,DX
						MOV		CS:[INT93H_FD_DMA_COUNT_BEFORE],AX
						; For debugging only<<


						MOV		AL,FDCCMD_READSECTOR;
						MOV		DX,IO_FDC_COMMAND
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_INT46

						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						MOV		AL,DMA_CHANNEL_FD
						CALL	INT93H_DMA_MASK


						; For debugging only>>
						MOV		DX,IO_DMA_COUNT_LOW
						IN		AX,DX
						MOV		CS:[INT93H_FD_DMA_COUNT_AFTER],AX
						; For debugging only<<


						POP		AX
						CALL	INT93H_FD_SELECT_DRIVE_NOT_IN_USE

						MOV		DX,IO_FDC_STATUS
						IN		AL,DX
						MOV		CS:[INT93H_FD_LAST_STATUS_BYTE],AL

						POP		BX
						POP		CX
						POP		DX
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_WRITE:
						MOV		BX,[BP+SAVED_DS]
						MOV		DS,BX
						MOV		DI,[BP+SAVED_EDI]

						MOV		BX,[BP+SAVED_EBX]
						MOV		CX,[BP+SAVED_ECX]
						MOV		DX,[BP+SAVED_EDX]

						AND		BX,BX
						JE		INT93H_FD_EXIT_NO_ERROR

						MOV		WORD CS:[INT93H_READ_OR_WRITE],INT93H_FD_WRITE_INTERNAL
						JMP		INT93H_FD_RW_CYLINDER_LOOP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Input    Same as INT 06H
; Output   AL FDC Status
;          Destroys SI
INT93H_FD_WRITE_INTERNAL:
						PUSH	DX
						PUSH	CX
						PUSH	BX
						PUSH	AX

						CALL	INT93H_FD_SECTLEN_FROM_DRV
						MOV		SI,AX

						POP		AX
						PUSH	AX

						CALL	INT93H_FD_WAIT_FDC_READY
						CLI

						MOV		BYTE CS:[INT46H_DID_COME_IN],0

						CALL	INT93H_FD_SELECT_DRIVE_IN_USE
						CALL	INT93H_FD_MOTOR_ON_WAIT_AND_SET_FLAG

						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						CLI

						XCHG	BX,DX		; Now BH=Head  BL=Sector

						PUSH	CX
						MOV		DX,DS
						MOVZX	EDX,DX
						SHL		EDX,4
						MOVZX	EDI,DI
						ADD		EDX,EDI
						MOV		AL,DMA_CHANNEL_FD
						MOV		CX,SI
						CALL	INT93H_DMA_SETUP_WRITE
						POP		CX

						MOV		AL,CL
						MOV		DX,IO_FDC_CYLINDER
						OUT		DX,AL

						MOV		AL,BL
						MOV		DX,IO_FDC_SECTOR
						OUT		DX,AL

						STI
						XCHG	BX,DX		; Restore sector and side
						CALL	INT93H_FD_DRIVE_CONTROL_IRQEN

						CALL	INT93H_FD_WAIT_FDC_READY

						MOV		AL,FDCCMD_WRITESECTOR;
						MOV		DX,IO_FDC_COMMAND
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_INT46

						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						MOV		AL,DMA_CHANNEL_FD
						CALL	INT93H_DMA_MASK

						POP		AX
						CALL	INT93H_FD_SELECT_DRIVE_NOT_IN_USE

						MOV		DX,IO_FDC_STATUS
						IN		AL,DX

						MOV		CS:[INT93H_FD_LAST_STATUS_BYTE],AL

						POP		BX
						POP		CX
						POP		DX
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT93H_FD_CHECK_SECTOR:
						JMP		INT93H_FD_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_READADDR:
						JMP		INT93H_FD_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_FORMAT:
						JMP		INT93H_FD_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_GET_ERROR_DETAIL:
						JMP		INT93H_FD_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_WAIT_INT46:
						STI
						MOV		AL,CS:[INT46H_DID_COME_IN]
						AND		AL,AL
						JE		INT93H_FD_WAIT_INT46
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input AL drive 0,1,2, or 3
; Output AL Control Byte (CLKSEL, MOTOR, SIDE, DDEN, IRQMSK)
;        AH Speed Byte (HISPD, INUSE, MODE_B, DRV_SEL)  DRV_SEL bits will be clear in this output.
INT93H_FD_CTRL_BYTE_FROM_DRV_MODE:
						PUSH	EBX

						AND		AL,3
						MOVZX	BX,AL
						SHL		BX,2
						MOV		EBX,CS:[INT93_FD_MODE+BX]

						; AL does not have to be the drive number at this point.


						MOV		AL,2	; MFM mode
						TEST	EBX,FDMODE_FM_MFM_MASK
						JE		INT93H_FD_CTRL_BYTE_IS_MFM_MODE
						XOR		AL,AL
INT93H_FD_CTRL_BYTE_IS_MFM_MODE:


						AND		EBX,FDMODE_TYPE_MASK
						SHR		EBX,20

						CMP		BL,0
						JE		INT93H_FD_CONTROL_BYTE_2HD
						CMP		BL,1
						JE		INT93H_FD_CONTROL_BYTE_2DD
						CMP		BL,2
						JE		INT93H_FD_CONTROL_BYTE_2D

INT93H_FD_CONTROL_BYTE_2HD:
						OR		AL,FDC_CTL_MOTOR;
						MOV		AH,FDC_SPD_360RPM+FDC_SPD_INUSE;

						CMP		EBX,DISKBIOS_FD_MODE_1440K
						JNE		INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT

						OR		AH,FDC_SPD_MODE_B	;if 1440KB, add FDC_SPD_MODE_B
						JMP		INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT

INT93H_FD_CONTROL_BYTE_2DD:
						OR		AL,FDC_CTL_CLKSEL+FDC_CTL_MOTOR;
						MOV		AH,FDC_SPD_INUSE;
						JMP		INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT

INT93H_FD_CONTROL_BYTE_2D:
						OR		AL,FDC_CTL_CLKSEL+FDC_CTL_MOTOR;
						MOV		AH,FDC_SPD_INUSE;

INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT:
						POP		EBX

						MOV		CS:[INT93H_FD_LAST_CONTROL_BYTE],AX

						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input AL=drive Only bottom 2 bits are effective.  Higher bits ignored.
; Output AX=length
INT93H_FD_SECTLEN_FROM_DRV:
						PUSH	CX
						PUSH	BX

						AND		AL,3
						MOVZX	BX,AL
						SHL		BX,2
						MOV		CX,CS:[INT93_FD_MODE+2+BX]

						AND		CL,3
						MOV		AX,128
						SHL		AX,CL

						POP		BX
						POP		CX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input AL=drive Only bottom 2 bits are effective.  Higher bits ignored.
; Output AX=sectors per track
INT93H_FD_SECTPERTRK_FROM_DRV:
						PUSH	BX

						AND		AL,3
						MOVZX	BX,AL
						SHL		BX,2
						MOVZX	AX,BYTE CS:[INT93_FD_MODE+BX]

						POP		BX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_WAIT_FDC_READY:
						PUSH	DX
						PUSH	AX

						MOV		DX,IO_FDC_STATUS
INT93H_FD_WAIT_FDC_READY_LOOP:
						IN		AL,DX
						IN		AL,DX
						IN		AL,DX

						AND		AL,FDCSTA_BUSY
						JNE		INT93H_FD_WAIT_FDC_READY_LOOP

						POP		AX
						POP		DX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input AL drive number
INT93H_FD_SELECT_DRIVE_IN_USE:
						PUSH	AX
						PUSH	CX
						PUSH	DX

						AND		AL,3
						MOV		CH,1
						MOV		CL,AL
						SHL		CH,CL

						CALL	INT93H_FD_CTRL_BYTE_FROM_DRV_MODE
						JMP		INT93H_FD_SELECT_DRIVE_REST


; Input AL drive number
INT93H_FD_SELECT_DRIVE_NOT_IN_USE:
						PUSH	AX
						PUSH	CX
						PUSH	DX

						AND		AL,3
						MOV		CH,1
						MOV		CL,AL
						SHL		CH,CL

						CALL	INT93H_FD_CTRL_BYTE_FROM_DRV_MODE
						AND		AH,(~FDC_SPD_INUSE)


INT93H_FD_SELECT_DRIVE_REST:
						MOV		DX,IO_FDC_DRIVE_SELECT
						XCHG	AL,AH
						; AL is speedByte
						OUT		DX,AL

						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL

						OR		AL,CH
						OUT		DX,AL

						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL

						POP		DX
						POP		CX
						POP		AX

						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; DH side
INT93H_FD_DRIVE_CONTROL_IRQDIS:
						PUSH	AX
						PUSH	DX

						AND		DH,1
						SHL		DH,FDC_CTL_SIDE_SHIFT

						JMP		INT93H_FD_DRIVE_CONTROL_REST

; DH side
INT93H_FD_DRIVE_CONTROL_IRQEN:
						PUSH	AX
						PUSH	DX

						AND		DH,1
						SHL		DH,FDC_CTL_SIDE_SHIFT
						OR		DH,FDC_CTL_IRQEN

INT93H_FD_DRIVE_CONTROL_REST:
						CALL	INT93H_FD_CTRL_BYTE_FROM_DRV_MODE
						OR		AL,DH

						OUT_DRV_CTRL	; Destroys DX

						POP		DX
						POP		AX

						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;Input AH=74H
;      AL=20H+drive
;      BH=0 do not clear disk-change flag or non-zero clear disk-change flag of the specified drive.
;           If drive not ready, disk-change flag will always be set after this function regardless of the value of BH.
;Return
;      AH=0 -> AL=0 disk not changed  AL=1 disk changed  AL=2 drive not ready
;      AH=2 -> Wrong device
INT93H_FD_CHECK_DISK_CHANGE:
						; AL high 4-bits have already been checked.
						MOV		CL,[BP+SAVED_EAX] ; AL already destroyed. Re-fetch it.
						AND		CL,3

						MOV		AL,1
						SHL		AL,CL

						MOV		BL,0FFh
						OR		BH,BH
						JE		INT93H_FD_24H_DO_NOT_CLEAR_FLAG
						XOR		BL,AL

INT93H_FD_24H_DO_NOT_CLEAR_FLAG:
						MOV		AH,AL	; Save AL in AH

						MOV		DX,IO_FDC_DRIVE_SELECT
						OUT		DX,AL
						OUT		DX,AL
						OUT		DX,AL

						OR		AL,040H ; HISPD flag
						MOV		DX,IO_FDC_DRIVE_SELECT
						OUT		DX,AL
						OUT		DX,AL
						OUT		DX,AL

						MOV		DX,IO_FDC_DRIVE_STATUS
						IN		AL,DX
						IN		AL,DX
						IN		AL,DX
						AND		AL,DRIVE_STA_FREADY
						JNE		INT93H_FD_24H_DRIVE_READY

						OR		CS:[INT93_FD_DISKCHANGE],AH
						MOV		BYTE [BP+SAVED_EAX],2
						JMP		INT93H_FD_EXIT_NO_ERROR

INT93H_FD_24H_DRIVE_READY:
						MOV		BYTE [BP+SAVED_EAX],0
						TEST	AH,CS:[INT93_FD_DISKCHANGE]
						JE		INT93H_FD_24H_NO_CHANGE
						MOV		BYTE [BP+SAVED_EAX],1

INT93H_FD_24H_NO_CHANGE:
						AND		CS:[INT93_FD_DISKCHANGE],BL
						JMP		INT93H_FD_EXIT_NO_ERROR


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; AL drive number
INT93H_FD_MOTOR_ON_WAIT_AND_SET_FLAG:
						PUSH	EBX

						MOVZX	BX,AL
						CMP		BYTE CS:[INT93_FD_MOTOR],0
						JNE		INT93H_FD_MOTOR_ON_WAITED

						; If motor was not on, wait for at least 1000sec
						MOV		EBX,1000000
INT93H_FD_MOTOR_ON_WAIT_LOOP:
						OUT		06CH,AL
						DEC		EBX
						JNE		INT93H_FD_MOTOR_ON_WAIT_LOOP

						MOVZX	BX,AL
						MOV		BYTE CS:[INT93_FD_MOTOR],1

INT93H_FD_MOTOR_ON_WAITED:
						POP		EBX
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Called every 1 sec from TIMER BIOS
; Earlier FM TOWNS models had no mean of checking if the floppy-disk has been changed.
; Newer FM TOWNS models had a flag that was supposed to tell you if the floppy-disk has been changed, but the flag was disfunctional.
; The flag just does not register.  I printed this flag constantly while inserting and removing the floppy disk, but the flag
; sometimes changed, sometimes didn't.  The flag was utterly useless.
; There is a possibility that if I move the head, the flag is updated, which was totally absurd.
; Did I need to move the head to check if the disk was changed?  No thanks. Who came up with this useless flag was an absolute moron.
; As a result, only way to check disk change is regularly check drive-ready status.
INT93H_CHECK_FD_CHANGE_CALLBACK:
						; IF is supposed to be off because it is called from the timer-interrupt handler.
						CMP		BYTE CS:[INT93H_FD_IS_BUSY],0
						JNE		SHORT INT93H_CHECK_FD_CHANGE_BUSY

						CMP		WORD CS:[INT93_FD_MOTOR_OFF_TIMER],0
						JE		INT93H_FD_CHECKED_MOTOR_TIMEOUT

						DEC		WORD CS:[INT93_FD_MOTOR_OFF_TIMER]
						JNE		INT93H_FD_CHECKED_MOTOR_TIMEOUT

						; MOTOR-OFF TIMER counted down to zero.
						; No FD-BIOS activities for (INT93H_FD_MOTOR_OFF_TIMEOUT*10) ms.
						MOV		AL,CS:[INT93_FD_LAST_DRV_CTRL_REG]
						AND		AL,~FDC_CTL_MOTOR
						PUSH	DX
						OUT_DRV_CTRL	; Destroys DX
						POP		DX
						MOV		BYTE CS:[INT93_FD_MOTOR],0

INT93H_FD_CHECKED_MOTOR_TIMEOUT:
						CMP		BYTE CS:[INT93H_CHECK_DISKCHANGE_COUNT],100
						JB		SHORT INT93H_CHECK_FD_CHANGE_NOTYET

						MOV		BYTE CS:[INT93H_CHECK_DISKCHANGE_COUNT],0

						PUSH	AX
						PUSH	DX
						MOV		AX,0100H	; AL is drive number, AH is drive number flag.

INT93H_CHECK_FD_CHANGE_LOOP:
						PUSH	AX

						CALL	INT93H_FD_SELECT_DRIVE_NOT_IN_USE

						MOV		DX,IO_FDC_DRIVE_STATUS
						IN		AL,DX
						IN		AL,DX
						IN		AL,DX
						AND		AL,DRIVE_STA_FREADY
						JNE		INT93H_CHECK_FD_CHANGE_NEXT	; Jump if drive is ready

						; Not Ready
						OR		BYTE CS:[INT93_FD_DISKCHANGE],AH

INT93H_CHECK_FD_CHANGE_NEXT:
						POP		AX
						SHL		AH,1
						INC		AL
						CMP		AL,4
						JB		INT93H_CHECK_FD_CHANGE_LOOP

						POP		DX
						POP		AX

INT93H_CHECK_FD_CHANGE_BUSY:
						RETF

INT93H_CHECK_FD_CHANGE_NOTYET:
						INC		BYTE CS:[INT93H_CHECK_DISKCHANGE_COUNT]
						RETF


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_SEEK_ERROR:
						MOV		WORD CS:[ERROR_DETAIL],0ffffh
						JMP		INT93H_FD_HARDERROR

INT93H_FD_DRIVE_NOT_READY:
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_DRIVE_NOT_READY
						JMP		INT93H_FD_HARDERROR

INT93H_FD_RECORD_NOT_FOUND_ERROR:
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_RECORD_NOT_FOUND
						JMP		INT93H_FD_HARDERROR

INT93H_FD_CRC_ERROR:
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_CRC_ERROR
						JMP		INT93H_FD_HARDERROR

INT93H_FD_LOST_DATA:
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_LOST_DATA
						JMP		INT93H_FD_HARDERROR

INT93H_FD_WRITE_PROTECTED:
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_WRITE_PROTECTED
						JMP		INT93H_FD_HARDERROR

INT93H_FD_DELETED_DATA_ERROR:
						MOV		WORD CS:[ERROR_DETAIL],0FFFFh
						JMP		INT93H_FD_HARDERROR

INT93H_FD_UNKNOWN_ERROR:
						MOV		WORD CS:[ERROR_DETAIL],0FFFFh
						JMP		INT93H_FD_HARDERROR

INT93H_FD_HARDERROR:
						MOV		BYTE CS:[ERROR_CODE],080H
						JMP		INT93H_FD_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
