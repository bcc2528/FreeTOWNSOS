; Minimum VCPI driver to run Free386 DOS Extender
; Let's see how far I can go.

; To Do: Add an option to let Free386 run in no-VCPI mode.
;        That can save some DOS memory by dropping VCPI part of this driver.
;        However, that will disable C0000H to FFFFFH.

						CPU		386
						BITS	16

						%INCLUDE "UTIL.NSM"
						%INCLUDE "DEF.NSM"


						DD      0FFFFFFFFh                  ; SYSDEV_NEXT				
						DW      SYSDEV_DEVFLAG_IS_CHARDEV   ; SYSDEV_DEVFLAGS			
						DW      STRATEGY                    ; SYSDEV_STRATEGY			
						DW      INTERRUPT                   ; SYSDEV_INTERRUPT		
						DB      "EMMXXXX0"                  ; SYSDEV_NAME        		


XMS_MEMORY_START		EQU		0C0000H
XMS_START_HIWORD		EQU		(XMS_MEMORY_START/010000H)
XMS_START_LOWORD		EQU		(XMS_MEMORY_START&0FFFFH)

VCPI_CS					EQU		68H	; I don't know why 68H, but free386 is assuming it is.
VCPI_DS					EQU		70H
VCPI_SS					EQU		78H


REQ_HEADER				DD		0
CASCADE_INT2F			DD		0

FROM_PM_CS_IP			DD		0
FROM_PM_EFLAGS			DD		0
FROM_PM_ESP				DD		0
FROM_PM_SS				DW		0
FROM_PM_ES				DW		0
FROM_PM_DS				DW		0
FROM_PM_FS				DW		0
FROM_PM_GS				DW		0
FROM_PM_EDX				DD		0

SAVE_IO_404H			DB		0
SAVE_IO_480H			DB		0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

XMS_MAX_MEMORY_BLOCKS	EQU		32
XMS_BLOCK_RESOLUTION	EQU		0400H	; 1KB resolution
XMS_BLOCK_FLAG_MASK		EQU		03FFH
XMS_BLOCK_ADDR_MASK		EQU		0FFFFFC00H
XMS_MEMORY_BLOCKS		DD		(XMS_MAX_MEMORY_BLOCKS+1) dup (0)
XMS_MEMORY_BLOCKS_END:
XMS_HANDLE_TO_PHYSMEM	DD		XMS_MAX_MEMORY_BLOCKS dup (0)
XMS_HANDLE_TO_PHYSMEM_END:

XMS_BLOCK_FLAG_USED		EQU		1
XMS_BLOCK_FLAG_LAST		EQU		2

; Memory-Block
;   b31----------b10 b9-----b0
;    |  Phys-Addr   |  Flags |
; Flags
;   b0  Used
;   b1  End-Of-Usable Memory

;
; Return CF=0
;        EAX=Physical address of the largest unused block
;        ECX=Length of the largest unused block
;        Or CF=1,ECX=EAX=0 if none available.
;        ESI,EBX,EDX destroyed
XMS_FIND_LARGEST_BLOCK:
						MOV		SI,XMS_MEMORY_BLOCKS
						XOR		EAX,EAX
						XOR		ECX,ECX
XMS_FIND_LARGEST_BLOCK_LOOP:
						MOV		EDX,CS:[SI]
						TEST	EDX,XMS_BLOCK_FLAG_LAST
						JNE		XMS_FIND_LARGEST_BLOCK_BREAK

						AND		EDX,XMS_BLOCK_ADDR_MASK

						ADD		SI,4
						MOV		EBX,CS:[SI]
						AND		EBX,XMS_BLOCK_ADDR_MASK
						SUB		EBX,EDX

						CMP		EBX,ECX
						JB		XMS_FIND_LARGEST_BLOCK_LOOP

						MOV		ECX,EBX
						MOV		EAX,EDX
						JMP		XMS_FIND_LARGEST_BLOCK_LOOP

XMS_FIND_LARGEST_BLOCK_BREAK:
						JECXZ	XMS_FIND_LARGEST_BLOCK_NONE_AVAIL
						CLC
						RET

XMS_FIND_LARGEST_BLOCK_NONE_AVAIL:
						XOR		EAX,EAX
						XOR		ECX,ECX
						STC
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input EAX=physical memory, will be rounded to KB border.
XMS_MARK_BLOCK_USED:
						PUSH	SI
						PUSH	EBX

						MOV		SI,XMS_MEMORY_BLOCKS
						AND		EAX,XMS_BLOCK_ADDR_MASK

XMS_MARK_BLOCK_USED_LOOP:
						MOV		EBX,CS:[SI]
						TEST	EBX,XMS_BLOCK_FLAG_LAST
						JNE		XMS_MARK_BLOCK_USED_FAIL

						AND		EBX,XMS_BLOCK_ADDR_MASK
						CMP		EAX,EBX
						JE		XMS_MARK_BLOCK_USED_BREAK

						ADD		SI,4
						JMP		XMS_MARK_BLOCK_USED_LOOP

XMS_MARK_BLOCK_USED_BREAK:
						OR		BYTE CS:[SI],XMS_BLOCK_FLAG_USED
						POP		EBX
						POP		SI
						CLC
						RET

XMS_MARK_BLOCK_USED_FAIL:
						POP		EBX
						POP		SI
						STC
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Return:
;   ECX=Highest ending physical address
;   EDX=Total amount of free memory
;   Registers are saved.
XMS_GET_TOTAL_FREE_MEM:
						PUSH	SI
						PUSH	EAX
						PUSh	EBX

						MOV		SI,XMS_MEMORY_BLOCKS
						XOR		ECX,ECX
						XOR		EDX,EDX

XMS_GET_TOTAL_FREE_MEM_LOOP:
						MOV		EAX,CS:[SI]

						MOV		ECX,EAX
						AND		ECX,XMS_BLOCK_ADDR_MASK
						DEC		ECX

						TEST	EAX,XMS_BLOCK_FLAG_LAST
						JNE		XMS_GET_TOTAL_FREE_MEM_BREAK

						AND		EAX,XMS_BLOCK_ADDR_MASK

						ADD		SI,4
						MOV		EBX,CS:[SI]
						AND		EBX,XMS_BLOCK_ADDR_MASK

						SUB		EBX,EAX
						ADD		EDX,EBX
						JMP		XMS_GET_TOTAL_FREE_MEM_LOOP

XMS_GET_TOTAL_FREE_MEM_BREAK:
						POP		EBX
						POP		EAX
						POP		SI
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input:
;         EAX Physical address of the block
;         ECX Size of the aft block
; Output:
;         CF=0 EAX Physical address of the block that has ECX bytes
;         CF=1 Could not divide.  Block is used, or ECX is greater than the block size.
;         ESI,EDI,EBX destroyed.  ECX rounded up to 4KB border.
XMS_DIVIDE_BLOCK:
						MOV		SI,XMS_MEMORY_BLOCKS
						AND		EAX,XMS_BLOCK_ADDR_MASK
						ADD		ECX,XMS_BLOCK_RESOLUTION-1
						AND		ECX,XMS_BLOCK_ADDR_MASK

XMS_DIVIDE_BLOCK_SEARCH_LOOP:
						MOV		EBX,CS:[SI]
						TEST	EBX,XMS_BLOCK_FLAG_LAST
						JNE		XMS_DIVIDE_BLOCK_ERROR	; Block not found.

						AND		EBX,XMS_BLOCK_ADDR_MASK
						CMP		EAX,EBX
						JE		XMS_DIVIDE_BLOCK_FOUND

						ADD		SI,4
						CMP		SI,XMS_MEMORY_BLOCKS_END-4
						JB		XMS_DIVIDE_BLOCK_SEARCH_LOOP

						JMP		XMS_DIVIDE_BLOCK_ERROR	; Cannot divide any more.

XMS_DIVIDE_BLOCK_FOUND:
						MOV		EBX,CS:[SI]
						TEST	EBX,XMS_BLOCK_FLAG_USED
						JNE		XMS_DIVIDE_BLOCK_ERROR	; Block is used

						MOV		EBX,CS:[SI+4]
						AND		EBX,XMS_BLOCK_ADDR_MASK
						SUB		EBX,EAX

						CMP		EBX,ECX
						JE		XMS_DIVIDE_BLOCK_NOERR	; Do not have to divide. No error.
						JB		XMS_DIVIDE_BLOCK_ERROR	; Block is too small.

						MOV		DI,XMS_MEMORY_BLOCKS_END-4
XMS_DIVIDE_BLOCK_SHIFT_LOOP:
						MOV		EBX,CS:[DI-4]
						MOV		CS:[DI],EBX
						SUB		EDI,4
						CMP		EDI,ESI
						JA		XMS_DIVIDE_BLOCK_SHIFT_LOOP


						MOV		EAX,CS:[SI+8]	; Already shifted
						AND		EAX,XMS_BLOCK_ADDR_MASK
						SUB		EAX,ECX
						MOV		CS:[SI+4],EAX

XMS_DIVIDE_BLOCK_NOERR:
						CLC
						RET

XMS_DIVIDE_BLOCK_ERROR:
						STC
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input EAX=Physical Address
XMS_FREE_BLOCK:
						MOV		SI,XMS_MEMORY_BLOCKS
						AND		EAX,XMS_BLOCK_ADDR_MASK

XMS_FREE_BLOCK_SEARCH_LOOP:
						MOV		EBX,CS:[SI]
						TEST	EBX,XMS_BLOCK_FLAG_LAST
						JNE		XMS_FREE_BLOCK_ERR		; Not found

						AND		EBX,XMS_BLOCK_ADDR_MASK
						CMP		EAX,EBX
						JE		XMS_FREE_BLOCK_SEARCH_FOUND

						ADD		SI,4
						CMP		SI,XMS_MEMORY_BLOCKS_END
						JB		XMS_FREE_BLOCK_SEARCH_LOOP

XMS_FREE_BLOCK_ERR:
						STC
						RET

XMS_FREE_BLOCK_SEARCH_FOUND:
						MOV		CS:[SI],EAX
						CALL	XMS_CONSOLIDATE_BLOCKS
						CLC
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

XMS_CONSOLIDATE_BLOCKS:
						MOV		SI,XMS_MEMORY_BLOCKS

XMS_CONSOLIDATE_BLOCKS_OUT_LOOP:
						MOV		EBX,CS:[SI]
						TEST	EBX,XMS_BLOCK_FLAG_LAST
						JNE		XMS_CONSOLIDATE_BLOCKS_END

						TEST	EBX,XMS_BLOCK_FLAG_USED
						JNE		XMS_CONSOLIDATE_BLOCKS_OUT_NEXT

						MOV		EDX,CS:[SI+4]
						TEST	EDX,XMS_BLOCK_FLAG_USED+XMS_BLOCK_FLAG_LAST
						JNE		XMS_CONSOLIDATE_BLOCKS_OUT_NEXT

						; Found two consecutive unused blocks.
						MOV		BX,SI

XMS_CONSOLIDATE_BLOCKS_IN_LOOP:
						MOV		EDX,CS:[BX+4]
						MOV		CS:[BX],EDX
						ADD		BX,4
						TEST	EDX,XMS_BLOCK_FLAG_LAST
						JE		XMS_CONSOLIDATE_BLOCKS_IN_LOOP
						JMP		XMS_CONSOLIDATE_BLOCKS_OUT_LOOP

XMS_CONSOLIDATE_BLOCKS_OUT_NEXT:
						ADD		SI,4
						JMP		XMS_CONSOLIDATE_BLOCKS_OUT_LOOP

XMS_CONSOLIDATE_BLOCKS_END:
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Return BX=not FFFFh if found (offset to XMS_HANDLE_TO_PHYSMEM)
;        BX=FFFFh if not found
XMS_FIND_AVAIL_HANDLE:
						MOV		BX,XMS_HANDLE_TO_PHYSMEM

XMS_FIND_AVAIL_HANDLE_LOOP:
						CMP		DWORD CS:[BX],0
						JE		XMS_FOUND_AVAIL_HANDLE

						ADD		BX,4
						CMP		BX,XMS_HANDLE_TO_PHYSMEM_END
						JB		XMS_FIND_AVAIL_HANDLE_LOOP

						MOV		BX,0FFFFH
						STC
						RET

XMS_FOUND_AVAIL_HANDLE:
						SUB		BX,XMS_HANDLE_TO_PHYSMEM
						CLC
						RET
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

STRATEGY:
						MOV		CS:[REQ_HEADER],BX
						MOV		CS:[REQ_HEADER+2],ES
						RETF

INTERRUPT:
						SAVE_WORLD

						LES		BX,CS:[REQ_HEADER]

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR

						MOV		AL,ES:[BX+REQ_COMMAND]
						CMP		AL,DEVREQ_CMD_INIT
						JNE		INTERRUPT_EXIT

						MOV		CS:[HOMECOMING_CS],CS

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_NOERROR

						XOR		AX,AX
						MOV		DS,AX

						MOV		EAX,[4*02FH]
						MOV		CS:[CASCADE_INT2F],EAX

						MOV		AX,CS
						SHL		EAX,16
						MOV		AX,INT_67H
						MOV		[4*067H],EAX
						MOV		AX,INT_2FH
						MOV		[4*02FH],EAX

						MOV		WORD ES:[BX+REQ_INIT_END_OF_RESIDENT_CODE_RETURN],END_OF_MINVCPI
						MOV		ES:[BX+REQ_INIT_END_OF_RESIDENT_CODE_RETURN+2],CS


						MOV		DWORD CS:[XMS_MEMORY_BLOCKS],XMS_MEMORY_START

						CALL	GET_MEMORY_CAPACITY
						;Output  EDX=RAM size in bytes.
						;        BX=Dextroyed
						;        AX=Destroyed
						AND		EDX,XMS_BLOCK_ADDR_MASK
						OR		EDX,XMS_BLOCK_FLAG_LAST+XMS_BLOCK_FLAG_USED

						MOV		CS:[XMS_MEMORY_BLOCKS+4],EDX


INTERRUPT_EXIT:
						RESTORE_WORLD
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT_67H:
						CMP		AX,0DE00H
						JE		INT_67H_DE00H
						CMP		AX,0DE02H
						JE		INT_67H_DE02H
						CMP		AX,0DE06H
						JE		INT_67H_DE06H
						CMP		AX,0DE01H
						JE		INT_67H_DE01H
						CMP		AX,0DE0CH
						JE		INT_67H_DE0CH

						TSUGARU_DEBUG
						IRET

INT_67H_DE00H:
						PUSH	DS
						PUSH	DX
						MOV		DX,MINVCPI_LOGO
						PUSH	CS
						POP		DS
						MOV		AH,9
						INT		21H
						POP		DX
						POP		DS

						MOV		BX,0100h	; Fake VCPI Version 1.0.
						XOR		AH,AH		; Pretend VCPI installed.
						IRET

INT_67H_DE02H:			; Return RAM capacity in bytes.
						PUSH	BX
						PUSH	AX

						CALL	GET_MEMORY_CAPACITY
						;Output  EDX=RAM size in bytes.
						;        BX=Dextroyed
						;        AX=Destroyed
						SUB		EDX,4096	; Apparently it needs to be the physical address of the last page.

						POP		AX
						POP		BX
						XOR		AH,AH		; No Error
						IRET

; Page to Physical Address of the First 1MB
; Input CX=Page
; Output EDX=Physical Address
INT_67H_DE06H:
						; I am not in the God Damn VM86 mode.  Just bit shift.
						; I wish Intel guys had not come up with this VM86-mode ****shit.
						MOVZX	EDX,CX
						SHL		EDX,12
						XOR		AH,AH
						IRET


; Initialize First Page Table, setup 3 GDT descriptors, and return the first unused page and Protected-Mode Entry Point.
; Should I return the first uninitialized page?  Or, the page is used, but not allocated?
; Input ES:DI=First Page Table
;       DS:SI=GDT Pointer to the 3 descriptors
; Output AH=0
;        DI=Points to the first unused page table entry in the buffer.
;        EBX=Protected Mode Entry Point.
INT_67H_DE01H:
						; I am not in the God Damn VM86 mode.  First 1MB maps exactly to the physical address.
						; I wish Intel guys had not come up with this VM86-mode ****shit.

						; DOS6.2 VCPI reserved 42Ch.  42Ch/4=267 entries.  267*4KB=1064KB.
						; So, VCPI takes all RAM under 1064KB?  Can't the protected-mode apps use first 1064KB?

						; OK.  So be it.  Take first 1064KB.
						PUSH	EAX
						PUSH	CX
						MOV		CX,42Ch/4
						MOV		EAX,0067H	; Dirty|Avail|U/S|R/W|Present

INT_67H_DE01H_LOOP:		STOSD
						ADD		EAX,1000h	; Increment 4K
						LOOP	INT_67H_DE01H_LOOP

						; Keep DI here.  DI return should be the pointer to the next page-table entry.

						MOV		AX,CS
						MOVZX	EAX,AX
						SHL		EAX,4

						; EAX is the linear base of this CS.
						MOV		WORD [SI],0FFFFh
						MOV		[SI+2],AX
						ROL		EAX,16
						MOV		[SI+4],AL
						MOV		[SI+7],AH

						MOV		WORD [SI+5],009AH	; Byte Granularity, 16-bit operand, A=1, Present=1, DPL=0, Type=1AH(SEGTYPE_CODE_NONCONFORMING_READABLE)

						MOV		EAX,[SI]
						MOV		[SI+8],EAX
						MOV		EAX,[SI+4]
						MOV		[SI+12],EAX

						MOV		WORD [SI+8+5],0092H	; Same as CS, Type=12H(SEGTYPE_DATA_NORMAL_RW)

						; I don't know what to do with the third selector.
						XOR		EAX,EAX
						MOV		[SI+16],EAX
						MOV		[SI+20],EAX

						POP		CX
						POP		EAX

						XOR		AH,AH
						MOV		EBX,PROTECTED_MODE_ENTRY

						IRET


; Jump to the protected mode.
INT_67H_DE0CH:
						CALL	SAVE_SYSROM_FMRVRAM_STATE_AND_UNMAP

						MOV		CS:[HOMECOMING_CS],CS ; Just in case

						MOV		EAX,ESI
						SHR		EAX,4
						MOV		DS,AX
						AND		SI,0Fh

						MOV		EAX,[SI]
						MOV		CR3,EAX

						MOV		EAX,[SI+4]
						SHR		EAX,4
						MOV		ES,AX
						MOV		EAX,[SI+4]
						AND		EAX,0Fh
						LGDT	ES:[EAX]

						MOV		EAX,[SI+8]
						SHR		EAX,4
						MOV		ES,AX
						MOV		EAX,[SI+8]
						AND		EAX,0Fh
						LIDT	ES:[EAX]

						MOV		EAX,[SI+10H]
						MOV		CS:[INT_67H_DEC0H_32BIT_CSEIP],EAX
						MOV		AX,[SI+14H]
						MOV		CS:[INT_67H_DEC0H_32BIT_CSEIP+4],AX

						MOV		AX,[SI+0CH]
						MOV		CS:[INT_67H_DEC0H_32BIT_LDT],AX
						MOV		AX,[SI+0EH]
						MOV		CS:[INT_67H_DEC0H_32BIT_TR],AX

						MOV		EAX,CR0
						OR		EAX,80000001H
						MOV		CR0,EAX

						; JMPF	0068:INT_67H_DE0CH_32ENT
						DB		0EAH ; JMPF
						DW		INT_67H_DE0CH_32ENT
						DW		VCPI_CS

INT_67H_DE0CH_32ENT:
						; LLDT and LTR are not available in the Real Mode.
						LLDT	CS:[INT_67H_DEC0H_32BIT_LDT]

						; In the real<->protected context, task register is not used.
						; According to i386 Programmer's Reference Manual 1986,
						; "The loaded task state segment is marked busy.  A task switch does not occur."
						; "#GP(0) if the object named by the source selector is not a TSS or is already busy.;"
						; If I load TR here, the first real->protected switching, TR is marked as busy, and then
						; the second time, GP because TR is marked as busy.
						; LTR		CS:[INT_67H_DEC0H_32BIT_TR]
						JMP		FAR DWORD [CS:INT_67H_DEC0H_32BIT_CSEIP]

						HLT

INT_67H_DEC0H_32BIT_LDT:	DW		0
INT_67H_DEC0H_32BIT_TR:		DW		0
INT_67H_DEC0H_32BIT_CSEIP:
						DD		0
						DW		0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT_2FH:
						; Looks like Free386 uses only the following two functions of INT 2FH
						CMP		AX,4310H
						JE		MY_INT2FH_4310H
						CMP		AX,4300H
						JE		MY_INT2FH_4300H
						JMP		FAR [CS:CASCADE_INT2F]

MY_INT2FH_4300H:
						MOV		AL,80H	; Pretend XMS Installed.
						IRET

MY_INT2FH_4310H:
						MOV		BX,CS
						MOV		ES,BX
						MOV		BX,XMS_WANNABE_ENTRY
						IRET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

XMS_WANNABE_ENTRY:
						TEST	AH,AH
						JE		XMS_GETVERSION
						CMP		AH,0CH
						JE		XMS_LOCK
						CMP		AH,88h
						JE		XMS_INQUIRE_AVAILABLE_MEMORY
						CMP		AH,89h
						JE		XMS_ALLOC_MEMORY
						CMP		AH,0AH
						JE		XMS_FREE_MEMORY

						RETF

;;;;;;;;;;;;;;;;;;;;;;;;

XMS_GETVERSION:
						MOV		AH,3	; Pretend to be Version 3
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;

XMS_INQUIRE_AVAILABLE_MEMORY:
						PUSH	EBX
						PUSh	ESI

						CALL	XMS_FIND_LARGEST_BLOCK
						; Return CF=0
						;        EAX=Physical address of the largest unused block
						;        ECX=Length of the largest unused block
						;        Or CF=1,ECX=EAX=0 if none available.
						;        ESI,EBX,EDX destroyed
						JB		XMS_INQUIRE_AVAILABLE_NOMEM

						MOV		EAX,ECX
						SHR		EAX,10	; Make it in KB.

						CALL	XMS_GET_TOTAL_FREE_MEM
						;   ECX=Highest ending physical address
						;   EDX=Total amount of free memory
						;   Registers are saved.
						SHR		EDX,10	; Make it in KB

						POP		ESI
						POP		EBX
						XOR		BL,BL
						RETF

XMS_INQUIRE_AVAILABLE_NOMEM:
						CALL	XMS_GET_TOTAL_FREE_MEM
						XOR		EAX,EAX
						XOR		EDX,EDX
						POP		ESI
						POP		EBX
						MOV		BL,0A0H
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;

XMS_ALLOC_MEMORY:
		TSUGARU_DEBUG

						; Input	EDX=Requested size in KB
						PUSH	SI
						PUSH	DI
						PUSH	EBX
						PUSH	EAX
						PUSH	EDX

						CALL	XMS_FIND_AVAIL_HANDLE
						JB		XMS_ALLOC_MEMORY_NO_HANDLE

						PUSH	BX
						CALL	XMS_FIND_LARGEST_BLOCK
						POP		BX	; Save handle
						; Return CF=0
						;        EAX=Physical address of the largest unused block
						;        ECX=Length of the largest unused block
						;        Or CF=1,ECX=EAX=0 if none available.
						;        ESI,EBX,EDX destroyed
						JB		XMS_ALLOC_MEMORY_FAIL

						POP		EDX
						PUSH	EDX
						SHL		EDX,10
						CMP		EDX,ECX
						JA		XMS_ALLOC_MEMORY_FAIL


						MOV		ECX,EDX
						; Input:
						;         EAX Physical address of the block
						;         ECX Size of the aft block
						PUSH	BX
						CALL	XMS_DIVIDE_BLOCK
						POP		BX
						; Output:
						;         CF=0 EAX Physical address of the block that has ECX bytes
						;         CF=1 Could not divide.  Block is used, or ECX is greater than the block size.
						;         ESI,EDI,EBX destroyed.  ECX rounded up to 4KB border.
						JB		XMS_ALLOC_MEMORY_FAIL	; Not supposed to


						; EAX is the physical address of the memory block.
						MOV		CS:[XMS_HANDLE_TO_PHYSMEM+BX],EAX
						CALL	XMS_MARK_BLOCK_USED	; Input EAX=physical memory


						POP		EDX
						MOV		DX,BX	; DX is handle
						POP		EAX
						POP		EBX
						POP		DI
						POP		SI

						; Free386 allocates all memory.  Sure.  I give it to Free386.  Nobody else is supposed to
						; touch the upper memory.
						MOV		AX,1	; Success
						RETF

XMS_ALLOC_MEMORY_FAIL:
						POP		EDX
						POP		EAX
						POP		EBX
						POP		DI
						POP		SI
						XOR		AX,AX
						MOV		BL,0A0H
						RETF

XMS_ALLOC_MEMORY_NO_HANDLE:
						POP		EDX
						POP		EAX
						POP		EBX
						POP		DI
						POP		SI
						XOR		AX,AX
						MOV		BL,0A1H
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;

XMS_LOCK:
		TSUGARU_DEBUG
						CMP		DX,4*XMS_MAX_MEMORY_BLOCKS
						JAE		XMS_LOCK_INVALID_HANDLE

						PUSH	EBX
						MOV		BX,DX
						MOV		EBX,CS:[XMS_HANDLE_TO_PHYSMEM+BX]
						AND		EBX,EBX
						JE		XMS_LOCK_INVALID_HANDLE_AFTER_PUSHEBX

						MOV		AX,BX	; AX is LOWORD temporarily
						ROL		EBX,16
						MOV		DX,BX	; DX is HIWORD
						POP		EBX		; Recover EBX HIWORD
						MOV		BX,AX	; BX is LOWORD now.

						MOV		AX,1	; Success
						RETF

XMS_LOCK_INVALID_HANDLE_AFTER_PUSHEBX:
						POP		EBX
XMS_LOCK_INVALID_HANDLE:
						MOV		AX,0
						MOV		BL,0A2h
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;

XMS_FREE_MEMORY:
		TSUGARU_DEBUG
						CMP		DX,4*XMS_MAX_MEMORY_BLOCKS
						JAE		XMS_FREE_INVALID_HANDLE

						PUSH	EBX
						PUSH	EAX
						MOV		BX,DX
						MOV		EAX,CS:[XMS_HANDLE_TO_PHYSMEM+BX]
						CALL	XMS_FREE_BLOCK
						XOR		EAX,EAX
						MOV		DWORD CS:[XMS_HANDLE_TO_PHYSMEM+BX],EAX
						POP		EAX
						POP		EBX
						MOV		AX,1
						RETF

XMS_FREE_INVALID_HANDLE:
						XOR		AX,AX
						MOV		BL,0A2h
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Output  EDX=RAM size in bytes.
;        BX=Dextroyed
;        AX=Destroyed
GET_MEMORY_CAPACITY:
						MOV		DX,3150H	; (RAMinMB-1) times FFs
						XOR		BX,BX

GET_MEMORY_CAPACITY_LOOP:
						INC		BX
						IN		AL,DX
						ADD		DX,2
						CMP		AL,0FFh
						JE		GET_MEMORY_CAPACITY_LOOP

						; BX=Number_of_FFs+1

						INC		BX
						SHR		BX,1

						; BX=(Number_of_FFs+2)/2

						MOVZX	EDX,BX
						SHL		EDX,20

						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PROTECTED_MODE_ENTRY:
						CMP		AX,0DE0CH
						JE		PROTECTED_MODE_ENTRY_DE0CH
						CLI
						HLT



PROTECTED_MODE_ENTRY_DE0CH:
						PUSH	CS
						ADD		WORD SS:[ESP],8
						POP		GS		; GS is same memory area as CS, but can R/W.

						MOV		GS:[FROM_PM_EDX],EDX

						ADD		ESP,8

						POP		EDX
						MOV		GS:[FROM_PM_CS_IP],DX
						POP		EDX
						MOV		GS:[FROM_PM_CS_IP+2],DX
						POP		EDX	; Skip EFLAGS
						POP		EDX
						MOV		GS:[FROM_PM_ESP],EDX
						POP		EDX
						MOV		GS:[FROM_PM_SS],DX
						POP		EDX
						MOV		GS:[FROM_PM_ES],DX
						POP		EDX
						MOV		GS:[FROM_PM_DS],DX
						POP		EDX
						MOV		GS:[FROM_PM_FS],DX
						POP		EDX
						MOV		GS:[FROM_PM_GS],DX

						CLI
						PUSHFD
						POP		EDX
						MOV		GS:[FROM_PM_EFLAGS],EDX

						; Do I need to clear operand-size and granurarity bits of the segment registers?
						; Free386 does that.
						MOV		DX,VCPI_DS
						MOV		DS,DX
						MOV		ES,DX
						MOV		FS,DX
						MOV		GS,DX
						MOV		SS,DX	; Danger.  No call, no push, pull from this line.

						MOV		EDX,CR0
						AND		EDX,7FFFFFFEh	; Clear PM and PG
						MOV		CR0,EDX


						; MOV		WORD GS:[HOMECOMING_CS_IP],HOMECOMING_IP
						; JMP		FAR WORD [GS:HOMECOMING_CS_IP] <- This doesn't work in the real hardware?
						DB		0EAH ; JMPF
						DW		HOMECOMING_IP
HOMECOMING_CS:			DW		0


HOMECOMING_IP:			; OK, it resets CS.
						LIDT	CS:[REAL_MODE_IDT]

						MOV		DS,CS:[FROM_PM_DS]
						MOV		ES,CS:[FROM_PM_ES]
						MOV		FS,CS:[FROM_PM_FS]
						MOV		GS,CS:[FROM_PM_GS]

						MOV		EDX,CS:[FROM_PM_EDX]
						MOV		SS,CS:[FROM_PM_SS]
						MOV		ESP,CS:[FROM_PM_ESP]

						PUSH	DWORD CS:[FROM_PM_EFLAGS]
						POPFD

						CALL	RESTORE_SYSROM_FMRVRAM

						JMP		FAR [CS:FROM_PM_CS_IP]

						HLT

REAL_MODE_IDT:			DW		03FFh,0,0



SAVE_SYSROM_FMRVRAM_STATE_AND_UNMAP:
						PUSH	DX
						PUSH	AX

						MOV		DX,404H
						IN		AL,DX
						AND		AL,80H
						MOV		CS:[SAVE_IO_404H],AL
						MOV		AL,80h
						OUT		DX,AL

						MOV		DX,480H
						IN		AL,DX
						AND		AL,3
						MOV		CS:[SAVE_IO_480H],AL
						MOV		AL,3
						OUT		DX,AL

						POP		AX
						POP		DX
						RET



RESTORE_SYSROM_FMRVRAM:
						PUSH	DX
						PUSH	AX

						MOV		DX,404H
						MOV		AL,CS:[SAVE_IO_404H]
						OUT		DX,AL

						MOV		DX,480H
						MOV		AL,CS:[SAVE_IO_480H]
						OUT		DX,AL

						POP		AX
						POP		DX
						RET


MINVCPI_LOGO:			DB		"VCPI/XMS Pretender Driver by CaptainYS (http://www.ysflight.com)",0Dh,0Ah,'$',0

END_OF_MINVCPI:			DB		"FM-series forever! (Excluding FM-V.  I don't care FM-V.)",0

