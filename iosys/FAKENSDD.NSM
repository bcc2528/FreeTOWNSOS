; Fake FORRBIOS.NSD + CoCo memory manager
; It reacts to:
; INT 8EH
;   AX=C000H Installation Check
;     Output
;       CX=436FH DX=436FH SI=204Bh DI=656EH "CoCo Ken"  BH=32H

;   AX=C10CH Register Call Buffer
;     Input   DX=Call-Buffer DOSSEG
;             If buffer size>=16KB  CX=Buffer Size divided by 16KB, ESI=0FFFF0000H  Buffer size needs to be 16KB*N
;             Else                  CX=1  ESI=Only low xx bits are 0, where the buffer size is xxKB.

;   AX=C207H Register Call32 Proc
;     Input DX:BX=CS:IP

;   AX=C103H
;     Input  CX=Driver Number
;     Output 
;       AH=0 Driver exists  AH=non-zero Driver does not exist
;       CX=Number of drivers
;       BX=CS selector of the driver
;       DX=DS selector of the driver
;       DS:EDI=8-byte two LDT entries for CS and DS  CS first, DS next
;     Sample output:
;       EBX=0000004C  EDX=00000044
;       DS:0000E790 FF 7F 00 50 24 9A 40 00 FF 7F 00 50 24 92 40 00
;         Then,
;       Code 004C:LiBase=00245000 Lim=00007FFF OpSz=20H AdSz=20H P=01 DPL=00 Type=1AH @ PHYS:0003ED28H
;       Data 0044:LiBase=00245000 Lim=00007FFF OpSz=20H AdSz=20H P=01 DPL=00 Type=12H @ PHYS:0003ED20H
;         WORD DS:[6] will be Strategy entry, which receives DS:EBX as the command header
;         WORD DS:[8] will be Interrupt entry.
;       Inherits the DOS Device-Driver structure.

; It pretends to have only one NSDD, FORRBIOS.NSD.


						CPU		386
						BITS	16

						%INCLUDE "UTIL.NSM"
						%INCLUDE "DEF.NSM"


						DD      0FFFFFFFFh                  ; SYSDEV_NEXT
						DW      SYSDEV_DEVFLAG_IS_CHARDEV   ; SYSDEV_DEVFLAGS
STRATEGY_PTR			DW      STRATEGY16                  ; SYSDEV_STRATEGY
INTERRUPT_PTR			DW      INTERRUPT16                 ; SYSDEV_INTERRUPT
DRIVER_NAME				DB      "********"

CASCADE_INT8E			DD		0
REQ_HEADER				DD		0
REQ_HEADER_SEG			DW		0

CALLBUF_PTR				DD		0
CALLBUF_SIZE			DD		0

CALL32PROC				DD		0

PROT_SELECTOR_CS		EQU		4CH
PROT_SELECTOR_DS		EQU		44H




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

						BITS	32

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 32-bit Process ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

STRATEGY32:
						PUSH	FS
						PUSH	PROT_SELECTOR_DS
						POP		FS

						MOV		FS:[REQ_HEADER_SEG],DS
						MOV		FS:[REQ_HEADER],EBX

						POP		FS
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 32-bit Process ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INTERRUPT32:
						SAVE_WORLD

						LFS		EAX,CS:[REQ_HEADER]
						MOV		AH,FS:[EAX+2]
						; 0C1H	; Wake Up
						; 0C0H	; Sleep

						CMP		AH,0C1H
						JE		FORRBIOS_WAKEUP
						CMP		AH,0C0H
						JE		FORRBIOS_SUTDOWN

INTERRUPT32_EXIT:
						RESTORE_WORLD

						; I probably need to set NO_ERROR state in somewhere, but there is no information about what to write to where.

						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 32-bit Process ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ORIGINAL_INT93H_HANDLER			DD	0
ORIGINAL_INT93H_HANDLER_SEG		DD	0

ORIGINAL_INT97H_HANDLER			DD	0
ORIGINAL_INT97H_HANDLER_SEG		DD	0

FORRBIOS_WAKEUP:
						MOV		AX,PROT_SELECTOR_DS
						MOV		DS,AX

						MOV		AX,2502H	; Get Protected-Mode INT Vector
						MOV		CL,93H
						INT		21H
						MOV		[ORIGINAL_INT93H_HANDLER],EBX
						MOV		[ORIGINAL_INT93H_HANDLER_SEG],ES

						MOV		AX,2502H	; Get Protected-Mode INT Vector
						MOV		CL,97H
						INT		21H
						MOV		[ORIGINAL_INT97H_HANDLER],EBX
						MOV		[ORIGINAL_INT97H_HANDLER_SEG],ES

						MOV		AX,2504H
						MOV		CL,93H
						PUSH	CS
						POP		DS
						MOV		EDX,INT93H_INTERCEPT
						INT		21H

						MOV		AX,2504H
						MOV		CL,97H
						PUSH	CS
						POP		DS
						MOV		EDX,INT97H_INTERCEPT
						INT		21H

						JMP		INTERRUPT32_EXIT


FORRBIOS_SUTDOWN:
						JMP		INTERRUPT32_EXIT




;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; 32-bit Process ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT93H_INTERCEPT:
						JMP		FAR [CS:ORIGINAL_INT93H_HANDLER]


INT97H_INTERCEPT:
						JMP		FAR [CS:ORIGINAL_INT97H_HANDLER]


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

						BITS	16
INT8E_INTERCEPT:
						CMP		AX,0C000H
						JE		INT8E_C000_INST_CHECK
						CMP		AX,0C10CH
						JE		INT8E_C10C_REGIST_CALLBUF
						CMP		AX,0C207H
						JE		INT8E_C207_REGIST_CALL32PROC
						CMP		AX,0C103H
						JE		INT8E_C103_GET_NSD

						JMP		FAR [CS:CASCADE_INT8E]


;   AX=C000H Installation Check
;     Output
;       AH=0  CX=436FH DX=436FH SI=204Bh DI=656EH "CoCo Ken"  BH==' '  BL=questionable
INT8E_C000_INST_CHECK:
						XOR		AH,AH
						MOV		CX,436FH
						MOV		DX,436FH
						MOV		SI,204Bh
						MOV		DI,656EH
						MOV		BH,32H

						; Clear CF
						PUSH	BP
						MOV		BP,SP	; [BP+0]=BP  [BP+2]=ReturnIP  [BP+4]=ReturnCS  [BP+6]=FLAGS
						AND		BYTE [BP+6],0FEH
						POP		BP
						IRET



;   AX=C10CH Register Call Buffer
;     Input   DX=Call-Buffer DOSSEG
;             If buffer size>=16KB  CX=Buffer Size divided by 16KB, ESI=0FFFF0000H  Buffer size needs to be 16KB*N
;             Else                  CX=1  ESI=Only low xx bits are 0, where the buffer size is xxKB.
INT8E_C10C_REGIST_CALLBUF:
						TSUGARU_STATE

						SAVE_WORLD

						MOV		CS:[CALLBUF_PTR+2],DX

						MOVZX	ECX,CX
						OR		ESI,0FFFF0000H

						JCXZ	INT8E_C10C_REGIST_CALLBUF_EXIT
						CMP		CX,1
						JNE		INT8E_C10C_REGIST_CALLBUF_SIMPLE

						; Less than 16KB
						BSF		ECX,ESI
						SHL		ECX,10
						JMP		INT8E_C10C_REGIST_CALLBUF_EXIT

INT8E_C10C_REGIST_CALLBUF_SIMPLE:
						SHL		ECX,4+10	; CX=size/16KB

INT8E_C10C_REGIST_CALLBUF_EXIT:
						MOV		CS:[CALLBUF_SIZE],ECX

						RESTORE_WORLD
						XOR		AH,AH
						IRET



;   AX=C207H Register Call32 Proc
;     Input DX:BX=CS:IP
INT8E_C207_REGIST_CALL32PROC:
						TSUGARU_STATE
						MOV		CS:[CALL32PROC],BX
						MOV		CS:[CALL32PROC+2],DX
						XOR		AH,AH
						IRET



;   AX=C103H
;     Input  CX=Driver Number
;     Output 
;       AH=0 Driver exists  AH=non-zero Driver does not exist
;       CX=Number of drivers
;       BX=CS selector of the driver
;       DX=DS selector of the driver
;       DS:EDI=8-byte two LDT entries for CS and DS  CS first, DS next
;     Sample output:
;       EBX=0000004C  EDX=00000044
;       DS:0000E790 FF 7F 00 50 24 9A 40 00 FF 7F 00 50 24 92 40 00
;         Then,
;       Code 004C:LiBase=00245000 Lim=00007FFF OpSz=20H AdSz=20H P=01 DPL=00 Type=1AH @ PHYS:0003ED28H
;       Data 0044:LiBase=00245000 Lim=00007FFF OpSz=20H AdSz=20H P=01 DPL=00 Type=12H @ PHYS:0003ED20H
;         WORD DS:[6] will be Strategy entry, which receives DS:EBX as the command header
;         WORD DS:[8] will be Interrupt entry.
;       Inherits the DOS Device-Driver structure.
INT8E_C103_GET_NSD:
						TSUGARU_STATE
						JCXZ	INT8E_C103_GET_NSD_ZERO

INT8E_C103_GET_NSD_NOT_ZERO:
						MOV		AH,0FFH ; Return AH=non_zero to tell drive ID=CX does not exist.
						PUSH	BP
						MOV		BP,SP
						OR		BYTE [BP+6],1
						POP		BP
						IRET

INT8E_C103_GET_NSD_ZERO:
						PUSH	EAX

						MOV		CX,1
						MOV		BX,PROT_SELECTOR_CS
						MOV		DX,PROT_SELECTOR_DS

						MOV		AX,CS
						MOVZX	EAX,AX
						SHL		EAX,4
						MOV		[DI+2],EAX

						MOV		WORD [DI],END_OF_FAKENSDD_DRIVER
						MOV		BYTE [DI+5],9AH	; Present, DPL=0, Type=1AH
						MOV		BYTE [DI+6],40H	; Granularity=bytes, 32-bit operand size, Limit upper byte=0
						MOV		BYTE [DI+7],0

						MOV		WORD [DI+8],END_OF_FAKENSDD_DRIVER
						MOV		[DI+10],EAX
						MOV		BYTE [DI+13],92H	; Present, DPL=0, Type=12H
						MOV		BYTE [DI+14],40H	; Granularity=bytes, 32-bit operand size, Limit upper byte=0
						MOV		BYTE [DI+15],0

						POP		EAX

						XOR		AH,AH	; Should I clear CF?
						PUSH	BP
						MOV		BP,SP
						AND		BYTE [BP+6],0FEH
						POP		BP
						IRET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FAKENSDD_LOGO:			DB		"FAKE FORRBIOS.NSD Driver by CaptainYS (http://www.ysflight.com)",0Dh,0Ah,'$',0

END_OF_FAKENSDD_DRIVER:

STRATEGY16:
						MOV		CS:[REQ_HEADER],BX
						MOV		CS:[REQ_HEADER+2],ES
						RETF

INTERRUPT16:
						SAVE_WORLD

						LES		BX,CS:[REQ_HEADER]

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR

						MOV		AL,ES:[BX+REQ_COMMAND]
						CMP		AL,DEVREQ_CMD_INIT
						JNE		INTERRUPT_EXIT

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_NOERROR

						XOR		AX,AX
						MOV		DS,AX

						MOV		EAX,[4*08EH]
						MOV		CS:[CASCADE_INT8E],EAX

						MOV		AX,CS
						SHL		EAX,16
						MOV		AX,INT8E_INTERCEPT
						MOV		[4*08EH],EAX

						MOV		AX,STRATEGY32
						MOV		CS:[STRATEGY_PTR],AX
						MOV		AX,INTERRUPT32
						MOV		CS:[INTERRUPT_PTR],AX

						MOV		WORD ES:[BX+REQ_INIT_END_OF_RESIDENT_CODE_RETURN],END_OF_FAKENSDD_DRIVER
						MOV		ES:[BX+REQ_INIT_END_OF_RESIDENT_CODE_RETURN+2],CS

INTERRUPT_EXIT:
						RESTORE_WORLD
						RETF

END_OF_MINVCPI:			DB		"FM-series forever! (Excluding FM-V.  I don't care FM-V.)",0
