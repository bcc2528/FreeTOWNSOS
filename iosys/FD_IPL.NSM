; Requirement
;   IO.SYS needs to be saved continuously in the disk.  No fragmentation.  Must be at the root directory.


; IPL to be boot from an FD Disk image.
; Wanted to make it a IC Memory Card boot, but realized Compatible System ROM does not support IC Memory Card Boot yet.

						CPU		386
						BITS	16

						%INCLUDE "UTIL.NSM"
						%INCLUDE "DEF.NSM"
						%INCLUDE "TOWNSDEF.NSM"


; Root directory will be read from B000:4000
ROOTDIR_READ_OFFSET		EQU		4000h


CODE					SEGMENT USE16

						DB		"IPL4"

						JMP		SHORT REALMAIN

						PLACE	000BH

						; BIOS Parameter Block for 1232KB disk
						DW		1024	; 1024 bytes per sector
						DB		1		; 1 sector per cluster
						DW		1		; 1 reserved sector (IPL)
						DB		2		; 2 File Allocation Tables
						DW		0C0h	; 0C0h root-directory entries
						DW		04D0h	; 04D0h (1232) sectors
						DB		0FEh	; Media Descriptor for 1232KB
						DW		2		; 2 sectors per FAT
						DW		8		; 8 sectors per track
						DW		2		; 2 heads
						DD		0		; 0 hidden sectors
						DD		0		; 32-bit number of sectors (Used as IO.SYS location in Fujitsu IPL4)


; Offset +0BH to +23H will be BPB
; Fujitsu IPL uses dword at offset +20H as IO.SYS location (LBA if HDD, CHR if FDD)

						PLACE	005EH

; REALMAIN must be at 005EH
REALMAIN:
						CMP		BL,BOOTDEV_FD
						JE		BOOT
ERROR_END:
						RETF

IOSYS_FILENAME			DB		"IO      SYS"

;	Incoming BH is the unit number

BOOT:
; Read IO.SYS 64KB from sector 1 from 0400H, then JMP to 0050:0

						MOV		AX,CS
						MOV		DS,AX
						MOV		ES,AX
						MOV		FS,AX
						MOV		DI,BPB_POS_IN_IPL	; FS:DI is BPB

						MOV		[BOOT_DEVICE],BX

						AND		BH,7
						OR		BH,DISKBIOS_FDD_0
						MOV		[DISKBIOS_DEVICE_CODE],BH

						; Read Directory from B100:0000

						CALL	BPB_CALC_ROOTDIR_SECT_CT
						MOV		BX,AX
						MOV		[ROOTDIR_NUM_SECTORS],AX


						; BX is the number of sectors.


						CALL	BPB_CALC_ROOTDIR_LBA
						MOV		[ROOTDIR_SECTOR],AX


						; AX is LBA of the root directory.


						CALL	BPB_LBA_TO_CYLINDER_HEAD_SECTOR

						MOV		DI,ROOTDIR_READ_OFFSET
						MOV		AL,[DISKBIOS_DEVICE_CODE]
						CALL	READ_SECTORS
						JC		DISK_READ_ERROR

						MOV		DI,ROOTDIR_READ_OFFSET
						MOV		SI,IOSYS_FILENAME
						MOV		DX,[BPB_POS_IN_IPL+BPB_NUM_ROOT_DIR_ENT]
FIND_IOSYS_LOOP:
						PUSH	SI
						PUSH	DI
						MOV		CX,11
						CLD
						REP		CMPSB
						POP		DI
						POP		SI

						JE		FOUND_IOSYS

						DEC		DX
						JE		IOSYS_NOT_FOUND
						ADD		DI,DIRENT_LENGTH
						JMP		FIND_IOSYS_LOOP

FOUND_IOSYS:
						MOV		EAX,[DI+DIRENT_FILE_SIZE]
						MOVZX	ECX,WORD [BPB_POS_IN_IPL+BPB_BYTES_PER_SECTOR]

						ADD		EAX,ECX	; For rounding up (+bytesPerSector-1)
						DEC		EAX

						CDQ
						DIV		ECX

						MOV		EBX,EAX	; BX is number of sectors.

						PUSH	BX
						MOV		AX,[DI+DIRENT_FIRST_CLUSTER]

						XCHG	DI,BX
						MOV		DI,BPB_POS_IN_IPL
						CALL	BPB_CLUSTER_TO_SECT_CT
						ADD		AX,[ROOTDIR_SECTOR]
						ADD		AX,[ROOTDIR_NUM_SECTORS]
						CALL	BPB_LBA_TO_CYLINDER_HEAD_SECTOR
						XCHG	DI,BX

						POP		BX

						MOV		AL,CS:[DISKBIOS_DEVICE_CODE]
						PUSH	WORD IOSYS_SEGMENT
						POP		DS

						XOR		DI,DI
						CALL	READ_SECTORS
						JC		DISK_READ_ERROR

						MOV		BX,CS:[BOOT_DEVICE]

						DB		0EAH ; JMPF
						DW		0000H
						DW		0050H


DISK_READ_ERROR:
IOSYS_NOT_FOUND:
						STC
						RETF	; Return to the SYSROM



; Input
;   AL		20h or 21h
;   CX		Cylinder
;	DH		Head
;	DL		Sector
;	BX		Number of Sectors
;	DS:DI	Data Buffer
; Output
;   AH		BIOS Error Code
;   CX		Error Info
;   CF		Set if Error
READ_SECTORS:

READ_SECTORS_LOOP:
						PUSH	AX
						PUSH	CX

						PUSH	BX		; {

						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						MOV		BX,1	; Earlier version compatible ROM had an error in consecutive read (BX!=1)

						; How can I write CALL 		FAR PTR 0FFFBH:0014H
						DB		9AH		; CALLF FFFB:0014
						DW		 0014H
						DW		0FFFBH

						POP		BX		; }

						AND		AH,AH
						JNE		READ_SECTORS_ERROR

						POP		CX
						POP		AX

						ADD		DI,CS:[BPB_POS_IN_IPL+BPB_BYTES_PER_SECTOR]
						DEC		BX
						JLE		READ_SECTOR_DONE

						INC		DL		; Next Sector
						CMP		DL,CS:[BPB_POS_IN_IPL+BPB_SECT_PER_TRACK]
						JLE		READ_SECTORS_LOOP

						MOV		DL,1

						INC		DH		; Next Side
						AND		DH,1
						JNE		READ_SECTORS_LOOP

						INC		CX		; Next Track
						JMP		READ_SECTORS_LOOP


READ_SECTOR_DONE:
						CLC
						RET

READ_SECTORS_ERROR:
						ADD		SP,4
						STC
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input   AX=Cluster  FS:DI=BPB
; Output  AX=LBA
;        Preserves BX
BPB_CLUSTER_TO_SECT_CT:
						PUSH	DX

						SUB		AX,2	; In DOS, cluster 2 is the first cluster.
						MOVZX	DX,BYTE FS:[DI+BPB_SECTOR_PER_CLUSTER]
						MUL		DX

						POP		DX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input FS:DI  BPB
; Output AX  Number of sectors of ROOTDIR
;        DX Destroyed
;        Preserves BX
BPB_CALC_ROOTDIR_SECT_CT:
						; Calculated as (#RootDirEntries * DirEntSize + bytesPerSector -1)/bytesPerSector
						; Number of bytes for root dir entries / bytes per sector, but must round up if some root dir entries are hanging.
						MOV		AX,FS:[DI+BPB_NUM_ROOT_DIR_ENT]
						SHL		AX,DIRENT_SHIFT		; AX is number of bytes of the root directory entries.

						ADD		AX,FS:[DI+BPB_BYTES_PER_SECTOR]  ; Add bytesPerSector-1 for rounding up.
						DEC		AX
						CWD
						DIV		WORD FS:[DI+BPB_BYTES_PER_SECTOR]  ; AX is the number of sectors of the root directory.

						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input FS:DI  BPB
; Output AX  LBA for the root dir
;        DX Destroyed
;        Preserves BX
BPB_CALC_ROOTDIR_LBA:
						; LBA is # of reserved sectors (IPL) plus number of FAT sectors times number of FATs
						; Skip FAT
						MOVZX	AX,BYTE FS:[DI+BPB_NUM_FATS]
						MUL		WORD FS:[DI+BPB_SECT_PER_FAT]

						; Skip IPL sector (reserved sector)
						MOVZX	DX,BYTE FS:[DI+BPB_RESERVED_SECTOR_CT]
						ADD		AX,DX

						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input    AX LBA
; Output   CX:Cylinder  DH:Head  DL:Sector  (Good for Disk BIOS input)
;          AX Destroyed
BPB_LBA_TO_CYLINDER_HEAD_SECTOR:
						; Cylinder=LBA/(#ofHeads*#sectorsPerTrack)
						; Sector=LBA%sectorsPerTrack
						CWD
						DIV		WORD FS:[DI+BPB_SECT_PER_TRACK]
						PUSH	DX	; Save Sector#, AX=Cylinder*#Heads+Head

						CWD
						DIV		WORD FS:[DI+BPB_NUM_HEADS]
						MOV		CX,AX	; CX is Cylinder, DX is head

						AND		DL,1
						MOV		DH,DL	; DL is Head

						POP		AX	; Restore Sector#
						MOV		DL,AL	; DL is Sector#
						INC		DL		; Secotr # starts with 1.

						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


BOOT_DEVICE				DW		0
DISKBIOS_DEVICE_CODE	DB		0h
ROOTDIR_SECTOR			DW		0
ROOTDIR_NUM_SECTORS		DW		0
