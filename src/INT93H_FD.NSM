FDMODE_FM_MFM_MASK		EQU		0x00800000
FDMODE_TYPE_MASK		EQU		0x00300000
FDMODE_SECT_LEN_MASK	EQU		0x00030000
FDMODE_NUM_HEAD_MASK	EQU		0x0000FF00
FDMODE_NUM_SECT_MASK	EQU		0x000000FF

FDC_CTL_CLKSEL 			EQU		020h
FDC_CTL_MOTOR  			EQU		010h
FDC_CTL_SIDE   			EQU		004h
FDC_CTL_MFM    			EQU		002h
FDC_CTL_IRQEN  			EQU		001h

FDC_CTL_SIDE_SHIFT		EQU		2

FDC_SPD_MODE_B 			EQU		080h
FDC_SPD_360RPM 			EQU		040h
FDC_SPD_INUSE  			EQU		010h



INT93_FD_MODE			DD		DISKBIOS_FD_MODE_1232K,DISKBIOS_FD_MODE_1232K,DISKBIOS_FD_MODE_1232K,DISKBIOS_FD_MODE_1232K
INT93_FD_CURRENT_CYL	DB		0,0,0,0
INT93_FD_SEEK_STEP		DB		1,1,1,1


INT93H_FD:
						MOV		BYTE CS:[ERROR_CODE],80H
						MOV		WORD CS:[ERROR_DETAIL],0FFFFh
						MOV		BYTE CS:[INT46H_DID_COME_IN],0

						CMP		AH,0DH
						JA		INT93H_EXIT
						MOVZX	BX,AH
						SHL		BX,1
						JMP		[CS:BX+INT93H_FD_JUMPTABLE]

INT93H_FD_JUMPTABLE:	DW		INT93H_FD_SET_DRIVE_MODE     ; 00H
						DW		INT93H_FD_GET_DRIVE_MODE     ; 01H
						DW		INT93H_FD_GET_DRIVE_STATUS   ; 02H
						DW		INT93H_FD_RESTORE            ; 03H
						DW		INT93H_FD_SEEK               ; 04H
						DW		INT93H_FD_READ               ; 05H
						DW		INT93H_FD_WRITE              ; 06H
						DW		INT93H_FD_CHECK_SECTOR       ; 07H
						DW		INT93H_EXIT                  ; 08H (For HDD only)
						DW		INT93H_FD_READADDR           ; 09H
						DW		INT93H_FD_FORMAT             ; 0AH
						DW		INT93H_EXIT                  ; 0BH
						DW		INT93H_EXIT                  ; 0CH
						DW		INT93H_FD_GET_ERROR_DETAIL   ; 0DH


INT93H_FD_SET_DRIVE_MODE:
						MOV		BYTE CS:[ERROR_CODE],DISKBIOS_ERROR_WRONG_DEVICE_OR_MODE
						MOV		AL,[BP+SAVED_EAX]
						AND		AL,0FH
						CMP		AL,3
						JA		INT93H_EXIT

						SHL		EDX,16
						MOV		BX,DX

						MOV		EBX,EDX
						AND		EBX,FDMODE_TYPE_MASK
						CMP		EBX,0x00300000
						JE		INT93H_EXIT

						SHL		AL,2
						MOVZX	DI,AL
						MOV		CS:[INT93_FD_MODE+DI],EDX

						JMP		INT93H_EXIT_NO_ERROR


INT93H_FD_GET_DRIVE_MODE:
						MOV		BYTE CS:[ERROR_CODE],DISKBIOS_ERROR_WRONG_DEVICE_OR_MODE
						MOV		AL,[BP+SAVED_EAX]
						AND		AL,0FH
						CMP		AL,3
						JA		INT93H_EXIT

						SHL		AL,2
						MOVZX	DI,AL
						MOV		EDX,CS:[INT93_FD_MODE+DI],

						MOV		[BP+SAVED_EBX],DX
						SHR		EDX,16
						MOV		[BP+SAVED_EDX],DL

						MOV		BYTE CS:[ERROR_CODE],0
						JMP		INT93H_EXIT_NO_ERROR


INT93H_FD_GET_DRIVE_STATUS:
						JMP		INT93H_EXIT


INT93H_FD_RESTORE:
						MOV		AL,[BP+SAVED_EAX]
						AND		AL,3
						CALL	INT93H_FD_SELECT_DRIVE

						XOR		DH,DH	; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQEN
						CALL	INT93H_FD_WAIT_FDC_READY

						MOV		AL,FDCCMD_RESTORE_HEAD_UNLOAD
						MOV		DX,IO_FDC_COMMAND
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_INT46

						MOV		AL,[BP+SAVED_EAX]
						AND		AL,3
						XOR		DH,DH	; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						MOVZX	BX,BYTE [BP+SAVED_EAX]
						AND		BL,3
						MOV		BYTE CS:[INT93_FD_CURRENT_CYL+BX],0

						JMP		INT93H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_SEEK:
						MOV		AL,[BP+SAVED_EAX]
						MOV		CX,[BP+SAVED_ECX]
						CALL	INT93H_FD_SEEK_INTERNAL

						MOV		DX,IO_FDC_STATUS
						IN		AL,DX

						TEST	AL,010H
						JNE		INT93H_FD_SEEK_ERROR
						TEST	AL,080H
						JNE		INT93H_FD_DRIVE_NOT_READY

						JMP		INT93H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input
;   AL Drive
;   CL Cylinder
; All registers preserved.
INT93H_FD_SEEK_INTERNAL:
						PUSH	DX
						PUSH	BX

						CALL	INT93H_FD_WAIT_FDC_READY
						CLI

						MOV		BYTE CS:[INT46H_DID_COME_IN],0

						CALL	INT93H_FD_SELECT_DRIVE
						XOR		DH,DH ; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						PUSH	AX

						AND		AL,3
						MOVZX	BX,AL
						MOV		AL,CS:[INT93_FD_CURRENT_CYL+BX]
						MOV		DX,IO_FDC_CYLINDER
						OUT		DX,AL

						MOV		AL,CL
						MOV		AH,CS:[INT93_FD_SEEK_STEP+BX]
						MUL		AH
						MOV		DX,IO_FDC_DATA
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_FDC_READY

						POP		AX
						PUSH	AX

						STI
						XOR		DH,DH ; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQEN

						MOV		AL,FDCCMD_SEEK
						MOV		DX,IO_FDC_COMMAND
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_INT46

						MOV		DX,IO_FDC_CYLINDER
						IN		AL,DX

						POP		BX		; BX is incomng AX.
						PUSH	BX

						AND		BX,3
						MOV		CS:[INT93_FD_CURRENT_CYL+BX],AL

						POP		AX
						XOR		DH,DH ; Side 0
						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS
						POP		BX
						POP		DX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input AH=05 AL=Device CX=Cylinder  DH=Head  DL=Sector  BX=number of sectors  DS:DI=Buffer
INT93H_FD_READ:
						MOV		BX,[BP+SAVED_DS]
						MOV		DS,BX
						MOV		DI,[BP+SAVED_EDI]

						MOV		BX,[BP+SAVED_EBX]
						MOV		CX,[BP+SAVED_ECX]
						MOV		DX,[BP+SAVED_EDX]

						AND		BX,BX
						JE		INT93H_EXIT_NO_ERROR

INT93H_FD_READ_CYLINDER_LOOP:
						MOV		AX,[BP+SAVED_EAX]
						CALL	INT93H_FD_SEEK_INTERNAL

INT93H_FD_READ_SECTOR_LOOP:
						; Loop until Record Not Found && 0<BX
						PUSH	BX
						PUSH	CX
						PUSH	DX
						MOV		AL,[BP+SAVED_EAX]
						CALL	INT93H_FD_READ_INTERNAL
						POP		DX
						POP		CX
						POP		BX

						TEST	AL,IOERR_RECORD_NOT_FOUND
						JNE		INT93H_FD_RECORD_NOT_FOUND_ERROR
						TEST	AL,IOERR_CRC
						JNE		INT93H_FD_CRC_ERROR
						TEST	AL,IOERR_LOST_DATA
						JNE		INT93H_FD_LOST_DATA

						; One sector was read with no error.
						MOV		AL,[BP+SAVED_EAX]
						CALL	INT93H_FD_SECTLEN_FROM_DRV
						ADD		DI,AX
						DEC		BX
						JE		INT93H_EXIT_NO_ERROR

						INC		DL	; Next Sector
						MOV		AL,[BP+SAVED_EAX]
						CALL	INT93H_FD_SECTPERTRK_FROM_DRV
						CMP		DL,AL
						JLE		INT93H_FD_READ_SECTOR_LOOP

						MOV		DL,1
						INC		DH	; Next Side
						AND		DH,1
						JNE		INT93H_FD_READ_SECTOR_LOOP

						INC		CL	; Next Cylinder
						JMP		INT93H_FD_READ_CYLINDER_LOOP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input    Same as INT 05H
; Output   AL FDC Status
;          Destroys SI
INT93H_FD_READ_INTERNAL:
						PUSH	DX
						PUSH	CX
						PUSH	BX
						PUSH	AX

						CALL	INT93H_FD_SECTLEN_FROM_DRV
						MOV		SI,AX

						POP		AX
						PUSH	AX

						CALL	INT93H_FD_WAIT_FDC_READY
						CLI

						MOV		BYTE CS:[INT46H_DID_COME_IN],0

						CALL	INT93H_FD_SELECT_DRIVE

						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						CLI

						XCHG	BX,DX		; Now BH=Head  BL=Sector

						PUSH	CX
						MOV		DX,DS
						MOVZX	EDX,DX
						SHL		EDX,4
						MOVZX	EDI,DI
						ADD		EDX,EDI
						MOV		AL,DMA_CHANNEL_FD
						MOV		CX,SI
						CALL	INT93H_DMA_SETUP_READ
						POP		CX

						MOV		AL,CL
						MOV		DX,IO_FDC_CYLINDER
						OUT		DX,AL

						MOV		AL,BL
						MOV		DX,IO_FDC_SECTOR
						OUT		DX,AL

						STI
						XCHG	BX,DX		; Restore sector and side
						CALL	INT93H_FD_DRIVE_CONTROL_IRQEN

						MOV		AL,FDCCMD_READSECTOR;
						MOV		DX,IO_FDC_COMMAND
						OUT		DX,AL

						CALL	INT93H_FD_WAIT_INT46

						CALL	INT93H_FD_DRIVE_CONTROL_IRQDIS

						MOV		AL,DMA_CHANNEL_FD
						CALL	INT93H_DMA_MASK

						POP		AX

						MOV		DX,IO_FDC_STATUS
						IN		AL,DX

						POP		BX
						POP		CX
						POP		DX
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_WRITE:
						JMP		INT93H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_CHECK_SECTOR:
						JMP		INT93H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_READADDR:
						JMP		INT93H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_FORMAT:
						JMP		INT93H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_GET_ERROR_DETAIL:
						JMP		INT93H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_WAIT_INT46:
						STI
						MOV		AL,CS:[INT46H_DID_COME_IN]
						AND		AL,AL
						JE		INT93H_FD_WAIT_INT46
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input AL drive 0,1,2, or 3
; Output AL Control Byte
;        AH Speed Byte
INT93H_FD_CTRL_BYTE_FROM_DRV_MODE:
						PUSH	EBX

						AND		AL,3
						MOVZX	BX,AL
						SHL		BX,2
						MOV		EBX,CS:[INT93_FD_MODE+BX]

						AND		EBX,FDMODE_TYPE_MASK
						SHR		EBX,20

						CMP		BL,0
						JE		INT93H_FD_CONTROL_BYTE_2HD
						CMP		BL,1
						JE		INT93H_FD_CONTROL_BYTE_2DD
						CMP		BL,2
						JE		INT93H_FD_CONTROL_BYTE_2D

INT93H_FD_CONTROL_BYTE_2HD:
						MOV		AL,FDC_CTL_MOTOR;
						MOV		AH,FDC_SPD_360RPM+FDC_SPD_INUSE;

						CMP		EBX,DISKBIOS_FD_MODE_1440K
						JNE		INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT

						OR		AH,FDC_SPD_MODE_B	;if 1440KB, add FDC_SPD_MODE_B
						JMP		INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT

INT93H_FD_CONTROL_BYTE_2DD:
						MOV		AL,FDC_CTL_CLKSEL+FDC_CTL_MOTOR;
						MOV		AH,FDC_SPD_INUSE;
						JMP		INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT

INT93H_FD_CONTROL_BYTE_2D:
						MOV		AL,FDC_CTL_CLKSEL+FDC_CTL_MOTOR;
						MOV		AH,FDC_SPD_INUSE;

INT93H_FD_CTRL_BYTE_FROM_DRV_MODE_EXIT:
						POP		EBX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input AL=drive Only bottom 2 bits are effective.  Higher bits ignored.
; Output AX=length
INT93H_FD_SECTLEN_FROM_DRV:
						PUSH	CX
						PUSH	BX

						AND		AL,3
						MOVZX	BX,AL
						SHL		BX,2
						MOV		CX,CS:[INT93_FD_MODE+2+BX]

						AND		CL,3
						MOV		AX,128
						SHL		AX,CL

						POP		BX
						POP		CX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input AL=drive Only bottom 2 bits are effective.  Higher bits ignored.
; Output AX=sectors per track
INT93H_FD_SECTPERTRK_FROM_DRV:
						PUSH	BX

						AND		AL,3
						MOVZX	BX,AL
						SHL		BX,2
						MOVZX	AX,BYTE CS:[INT93_FD_MODE+BX]

						POP		BX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_WAIT_FDC_READY:
						PUSH	DX
						PUSH	AX

						MOV		DX,IO_FDC_STATUS
INT93H_FD_WAIT_FDC_READY_LOOP:
						IN		AL,DX
						IN		AL,DX
						IN		AL,DX

						AND		AL,FDCSTA_BUSY
						JNE		INT93H_FD_WAIT_FDC_READY_LOOP

						POP		AX
						POP		DX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


INT93H_FD_SELECT_DRIVE:
						PUSH	AX
						PUSH	CX
						PUSH	DX

						MOV		CH,1
						MOV		CL,AL
						SHL		CH,CL

						CALL	INT93H_FD_CTRL_BYTE_FROM_DRV_MODE

						MOV		DX,IO_FDC_DRIVE_SELECT
						XCHG	AL,AH
						; AL is speedByte
						OUT		DX,AL

						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL

						OR		AL,CH
						OUT		DX,AL

						OUT		IO_1US_WAIT,AL
						OUT		IO_1US_WAIT,AL

						POP		DX
						POP		CX
						POP		AX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


; Input AL drive  DH side
INT93H_FD_DRIVE_CONTROL_IRQEN:
						PUSH	AX
						PUSH	DX

						AND		DH,1
						SHL		DH,FDC_CTL_SIDE_SHIFT
						OR		DH,FDC_CTL_IRQEN

INT93H_FD_DRIVE_CONTROL_REST:
						CALL	INT93H_FD_CTRL_BYTE_FROM_DRV_MODE
						OR		AL,DH

						MOV		DX,IO_FDC_DRIVE_CONTROL
						OUT		DX,AL
						POP		DX
						POP		AX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input AL drive  DH side
INT93H_FD_DRIVE_CONTROL_IRQDIS:
						PUSH	AX
						PUSH	DX

						AND		DH,1
						SHL		DH,FDC_CTL_SIDE_SHIFT

						JMP		INT93H_FD_DRIVE_CONTROL_REST


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT93H_FD_SEEK_ERROR:
						MOV		BYTE CS:[ERROR_CODE],080H
						MOV		WORD CS:[ERROR_DETAIL],0
						JMP		INT93H_EXIT

INT93H_FD_DRIVE_NOT_READY:
						MOV		BYTE CS:[ERROR_CODE],080H
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_DRIVE_NOT_READY
						JMP		INT93H_EXIT

INT93H_FD_RECORD_NOT_FOUND_ERROR:
						MOV		BYTE CS:[ERROR_CODE],080H
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_RECORD_NOT_FOUND
						JMP		INT93H_EXIT

INT93H_FD_CRC_ERROR:
						MOV		BYTE CS:[ERROR_CODE],080H
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_CRC_ERROR
						JMP		INT93H_EXIT

INT93H_FD_LOST_DATA:
						MOV		BYTE CS:[ERROR_CODE],080H
						MOV		WORD CS:[ERROR_DETAIL],DISKBIOS_HARDERROR_LOST_DATA
						JMP		INT93H_EXIT

