						CPU		386
						BITS	16

						%INCLUDE "UTIL.NSM"
						%INCLUDE "DEF.NSM"
						%INCLUDE "TOWNSDEF.NSM"


BOOTSECT_SEG			EQU		8000h
ROOTDIR_OFFSET			EQU		0800h	; Rootdir loaded at BOOTSECT_SEG:ROOTDIR_OFFSET

SECTBUF_PAGES			EQU		64		; 64*16=1024


CODE					SEGMENT USE16
ENTRY:
						JE		SHORT REALENTRY

SEG_INT8EH				DW		0		; +02H
SEG_INT90H				DW		0		; +04H
SEG_INT91H				DW		0		; +06H
SEG_INT92H				DW		0		; +08H Reserved for FM-R Graphics BIOS
SEG_INT93H				DW		0		; +0AH
SEG_INT94H				DW		0		; +0CH Reserved for FM-R Printer BIOS
SEG_INT95H				DW		0		; +0EH Reserved for FM-R Hard-Copy BIOS
SEG_INT96H				DW		0		; +10H Reserved for FM-R Calendar BIOS
SEG_INT97H				DW		0		; +12H
SEG_INT98H				DW		0		; +14H Reserved for FM-R Mouse BIOS
SEG_INT9BH				DW		0		; +16H
SEG_INT9EH				DW		0		; +18H Reserved for FM-R Buzzer BIOS
SEG_INTAEH				DW		0		; +1AH
SEG_INTAFH				DW		0		; +1CH
SEG_INTECH				DW		0		; +1EH Reserved for FM-R OAK BIOS
SEG_INTEDH				DW		0		; +20H Reserved for FM-R OAK BIOS
SEG_INTFDH				DW		0		; +22H

YSDOS_SYS_FILENAME		DB		"YSDOS   SYS"

REALENTRY:
						MOV		DX,0040H
						MOV		SS,DX
						MOV		SP,100H

						MOV		CS:[BOOT_DEVICE],BX	; Sent from the IPL
						CALL	SETUP_REALMODE_INT_HANDLER

						MOV		AH,BIOSCMD_COMMON_INIT
						INT		93H


						MOV		EAX,SS:[IOSYS_SIZE_POS]  ; This gives the size of IO.SYS after 0050H segment.

						SHR		EAX,4
						MOV		BX,CS
						ADD		AX,BX ; AX is the next page after IO.SYS

						PUSH	AX	; Loading point in the stack.

						MOV		BX,CS:[BOOT_DEVICE]
						CMP		BL,BOOTDEV_FD
						JE		BOOT_FROM_FD
						CMP		BL,BOOTDEV_CD
						JE		BOOT_FROM_CD
						CMP		BL,BOOTDEV_HD
						JE		BOOT_FROM_HD

BOOT_FROM_HD:
BOOT_FROM_CD:
INFINITY				JMP		INFINITY



BOOT_FROM_FD:
						MOV		AL,BH
						AND		AL,0FH
						MOV		CS:[BOOT_DRIVE],AL	; A or B.  If the 3rd FD, forget about it....
						OR		AL,DISKBIOS_FDD_0
						MOV		CS:[DISKBIOS_BOOT_DEVICE],AL

						MOV		AH,DISKBIOS_CMD_03H_RESTORE
						INT		93H



						; Read IPL Sector to get BPB
						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						MOV		AL,CS:[DISKBIOS_BOOT_DEVICE]
						MOV		CX,0		; Track 0
						MOV		DX,0001h	; Head 0 Sector 1
						MOV		BX,1		; 1 sector
						MOV		DI,BOOTSECT_SEG
						MOV		DS,DI
						MOV		FS,DI	; Prep to use BPB
						XOR		DI,DI
						INT		93H
						JB		INFINITY



						MOV		DI,BPB_POS_IN_IPL

						CALL	BPB_CALC_ROOTDIR_SECT_CT	; In DOSUTIL.NSM  AX is # root-dir sectors, DX destroyed
						MOV		BX,AX
						PUSH	AX	; Save ROOTDIR sector count

						; BX is the number of sectors of the root dir.

						CALL	BPB_CALC_ROOTDIR_LBA		; In DOSUTIL.NSM

						PUSH	AX	; Save ROOTDIR LBA

						CALL	BPB_LBA_TO_CYLINDER_HEAD_SECTOR

						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						MOV		AL,CS:[DISKBIOS_BOOT_DEVICE]
						MOV		DI,ROOTDIR_OFFSET
						INT		93H


						PUSH	CS
						POP		ES
						MOV		SI,ROOTDIR_OFFSET
						MOV		DX,FS:[BPB_POS_IN_IPL+BPB_NUM_ROOT_DIR_ENT]
						CLD
FDBOOT_FIND_YSDOS:
						MOV		DI,YSDOS_SYS_FILENAME

						PUSH	SI
						MOV		CX,11
						REP		CMPSB
						POP		SI

						JE		FDBOOT_FOUND_YSDOS

						ADD		SI,DIRENT_LENGTH
						DEC		DX
						JNE		FDBOOT_FIND_YSDOS

						JMP		INFINITY	; YSDOS.SYS not found


FDBOOT_FOUND_YSDOS:
						; Need to know
						;   Where YSDOS.SYS started (LBA)
						;   How many sectors.

						MOV		DI,BPB_POS_IN_IPL

						MOV		EAX,[SI+DIRENT_FILE_SIZE]
						MOVZX	ECX,WORD [DI+BPB_BYTES_PER_SECTOR]

						ADD		EAX,ECX	; For rounding up (+bytesPerSector-1)
						DEC		EAX

						CDQ
						DIV		ECX

						MOV		EBX,EAX

						; BX is number of sectors.

						MOV		AX,[SI+DIRENT_FIRST_CLUSTER]

						CALL	BPB_CLUSTER_TO_SECT_CT
						POP		DX	; DX will be overwritten by BPB_LBA_TO_CYLINDER_HEAD_SECTOR anyway
						ADD		AX,DX
						POP		DX
						ADD		AX,DX
						CALL	BPB_LBA_TO_CYLINDER_HEAD_SECTOR

						POP		DS	; POP YSDOS Loading Point
						XOR		DI,DI
						PUSH	DS	; Save it again.

						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						MOV		AL,CS:[DISKBIOS_BOOT_DEVICE]

						INT		93H

						JB		INFINITY
						JMP		YSDOS_LOADED


; Stack Top is YSDOS Segment
YSDOS_LOADED:
						; INPUT to YSDOS.SYS
						;    DX     ENDMEM 0C000H in TOWNS because always TOWNS has more than 640KB
						;    DS:SI  DEVHEAD

						PUSH	CS
						POP		DS
						MOV		SI,CONDEV_HEADER_NEXT
						MOV		DX,0C000h

						PUSH	WORD 0
						MOV		BP,SP

						CALL	FAR [BP]

						; OUTPUT from YSDOS.SYS
						;    ES:DI  Pointer to SYSVARS

						MOV		CS:[YSDOS_SYSVARS_OFFSET],DI
						MOV		CS:[YSDOS_SYSVARS_SEG],ES

						CALL	CREATE_CDS

						MOV		DL,CS:[BOOT_DRIVE]
						MOV		AH,0Eh
						INT		21H

						MOV		AH,48h	; ALLOC MEMORY
						MOV		BX,SECTBUF_PAGES
						INT		21H
						MOV		CS:[SECTBUF_SEG],AX


						; Test FOPEN - FREAD
						MOV		AH,3Dh
						MOV		AL,0
						MOV		DX,DEFAULT_COMSPEC
						INT		21H

						MOV		BX,AX	; BX is file handle.

						MOV		AH,42h	; LSeek
						MOV		AL,2	; End of File
						XOR		CX,CX	; Offset zero
						XOR		DX,DX
						INT		21H

						; DX:AX is the file position from the start.

						SHL		EDX,16
						MOV		DX,AX
						PUSH	EDX

						MOV		AH,42h	; LSeek
						MOV		AL,0	; End of File
						XOR		CX,CX	; Offset zero
						XOR		DX,DX
						INT		21H

						; BX should stay the same

						MOV		AH,3Fh  ; Read
						POP		ECX		; Bytes to read
						MOV		DX,05000h
						MOV		DS,DX
						XOR		DX,DX	; Read from 5000:0000
						INT		21H

						; BX should stay the same

						MOV		AH,3EH	; Close
						INT		21H



						; TEST FOPEN from Floppy Disk
						MOV		AH,3Dh
						MOV		AL,0
						MOV		DX,TEST_YAMANDCOM
						PUSH	CS
						POP		DS
						INT		21H

						MOV		BX,AX	; BX is file handle.

						TSUGARU_DEBUG

						MOV		AH,42h	; LSeek
						MOV		AL,2	; End of File
						XOR		CX,CX	; Offset zero
						XOR		DX,DX
						INT		21H

						TSUGARU_DEBUG


						HLT
						HLT

TEST_YAMANDCOM:			DB	"A:\YAMAND.COM",0


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


CREATE_CDS:
						PUSH	CS
						POP		DS

						LGS		BX,[YSDOS_SYSVARS_OFFSET]

						LFS		SI,GS:[BX+SYSVARS_FIRST_DPB]

						MOV		DI,CDS
						XOR		CL,CL
						MOV		CH,GS:[BX+SYSVARS_NUM_DPB]
CREATE_CDS_LOOP:
						MOV		EAX,05C3A41h	; 41H='A'  3A=':'  5C='\'
						ADD		AL,CL
						MOV		[DI+CDS_CURDIR],EAX
						MOV		WORD [DI+CDS_CURDIR_CLUSTER],0xFFFF
						MOV		WORD [DI+CDS_CURDIR_ROOTLEN],2

						CMP		CL,CH
						JGE		CREATE_CDS_NO_MORE_DPB

						MOV		WORD [DI+CDS_DRIVE_TYPE],CDS_TYPE_VALID
						MOV		[DI+CDS_DRIVE_PARAM_BLOCK],SI
						MOV		[DI+CDS_DRIVE_PARAM_BLOCK+2],FS
						LFS		SI,FS:[SI+DPB_PTR_TO_NEXT_DPB]

CREATE_CDS_NO_MORE_DPB:
						ADD		DI,CURRENT_DIR_STRUCT_size
						INC		CL
						CMP		CL,MAX_NUM_CDS
						JB		CREATE_CDS_LOOP

						MOV		WORD GS:[BX+SYSVARS_FIRST_CDS],CDS
						MOV		GS:[BX+SYSVARS_FIRST_CDS+2],CS
						MOV		BYTE GS:[BX+SYSVARS_NUM_CDS],MAX_NUM_CDS


						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SETUP_REALMODE_INT_HANDLER:
						; Default INT Handlers be DEFAULT_INT_HANDLER of the same segment.
						MOV		AX,CS
						SHL		EAX,16
						MOV		AX,DEFAULT_INT_HANDLER

						XOR		DX,DX
						MOV		ES,DX

						MOV		CX,256
						MOV		DI,0
						REP		STOSD

						MOV		AX,CS:[SEG_INT8EH]
						SHL		EAX,16
						MOV		ES:[08EH*4],EAX
						MOV		AX,CS:[SEG_INT90H]
						SHL		EAX,16
						MOV		ES:[090H*4],EAX
						MOV		AX,CS:[SEG_INT91H]
						SHL		EAX,16
						MOV		ES:[091H*4],EAX
						MOV		AX,CS:[SEG_INT93H]
						SHL		EAX,16
						MOV		ES:[093H*4],EAX
						MOV		AX,CS:[SEG_INT97H]
						SHL		EAX,16
						MOV		ES:[097H*4],EAX
						MOV		AX,CS:[SEG_INT9BH]
						SHL		EAX,16
						MOV		ES:[09BH*4],EAX
						MOV		AX,CS:[SEG_INTAEH]
						SHL		EAX,16
						MOV		ES:[0AEH*4],EAX
						MOV		AX,CS:[SEG_INTAFH]
						SHL		EAX,16
						MOV		ES:[0AFH*4],EAX
						MOV		AX,CS:[SEG_INTFDH]
						SHL		EAX,16
						MOV		ES:[0FDH*4],EAX
						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


DEFAULT_INT_HANDLER:
						JMP		DEFAULT_INT_HANDLER


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


BOOT_DEVICE				DW		0
BOOT_DRIVE				DB		0	; 0 means A drive
DISKBIOS_BOOT_DEVICE	DB		0
YSDOS_SYSVARS_OFFSET	DW		0
YSDOS_SYSVARS_SEG		DW		0

SECTBUF_PTR				DW		0
SECTBUF_SEG				DW		0

DEFAULT_COMSPEC			DB		"C:\COMMAND.COM",0

CDS						DB		(CURRENT_DIR_STRUCT_size*MAX_NUM_CDS) dup (0)

						%INCLUDE	"DOSUTIL.NSM"
						%INCLUDE	"CONDEV.NSM"
						%INCLUDE	"CLOCKDEV.NSM"
						%INCLUDE	"TOWNS_CD.NSM"
						%INCLUDE	"BLOCKDEV.NSM"
