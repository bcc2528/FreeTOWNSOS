BLKDEV_PART_TABLE_SEG			EQU		7F00h	; Used during initialization only
BLKDEV_IPL_SEG					EQU		7F40h	; Used during initialization only

BLKDEV_HEADER_NEXT				DW	0FFFFh	; Tentative.  Block devices next.
								DW	0FFFFh
BLKDEV_HEADER_ATTRIBWORD		DW	0800h   ; BlockDev|open/close/removable media
BLKDEV_HEADER_STRATEGY_PTR		DW	BLKDEV_STRATEGY
BLKDEV_HEADER_INTERRUPT_PTR		DW	BLKDEV_INTERRUPT
BLKDEV_HEADER_NAME				DB	"QUACK!!!"

BLKDEV_REQHDR_PTR		DD	0

BLOCKDEV_MAX_ADDITIONAL_DRIVES	EQU		10		; Let's keep it 10 for the time being

FIRST_HDD_UNIT_NUMBER			EQU		3

INITIAL_BPB_ARRAY		DW		FD_BPB,FD_BPB,ROMDRIVE_BPB
						DW		HD_BPB
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*1
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*2
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*3
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*4
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*5
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*6
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*7
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*8
						DW		HD_BPB+BIOS_PARAMETER_BLOCK_size*9

; I think BPB should be updated when disk is re-inserted
FD_BPB:					DW		400H	; bytesPerSect
						DB		1		; sectPerCluster
						DW		1		; reservedSectors
						DB		2		; #FATs
						DW		00C0H	; #rootDirEntries
						DW		04D0H	; #sectors including reserved sectors
						DB		1		; mediaDesc
						DW		2		; #sectPerFAT
						DW		8		; #sectPerTrack
						DW		2		; #heads
						DW		0		; #hiddenSect
						DD		0		; 32-bit #sectors

ROMDRIVE_BPB:			DW		200H	; bytesPerSect
						DB		2		; sectPerCluster
						DW		1		; reservedSectors
						DB		2		; #FATs
						DW		0070H	; #rootDirEntries
						DW		0500H	; #sectors including reserved sectors
						DB		0FBh	; mediaDesc
						DW		2		; #sectPerFAT
						DW		8		; #sectPerTrack
						DW		1		; #heads
						DW		0		; #hiddenSect
						DD		0		; 32-bit #sectors



NUM_HD_BPB				DB		0
HD_BPB:					DB		(BLOCKDEV_MAX_ADDITIONAL_DRIVES*BIOS_PARAMETER_BLOCK_size) dup(0)
HD_TABLE:				DB		(BLOCKDEV_MAX_ADDITIONAL_DRIVES*DSKDRV_size) dup (0)



BLKDEV_STRATEGY:
						MOV		CS:[BLKDEV_REQHDR_PTR],BX
						MOV		CS:[BLKDEV_REQHDR_PTR+2],ES
						RETF

BLKDEV_INTERRUPT:
						SAVE_WORLD

						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_NOERROR ; Tentatively no error
						MOV		AL,ES:[BX+REQ_COMMAND]
						CMP		AL,DEVREQ_CMD_INIT
						JE		BLKDEV_INIT
						CMP		AL,DEVREQ_CMD_MEDIA_CHECK
						JE		BLKDEV_MEDIA_CHECK
						CMP		AL,DEVREQ_CMD_BUILD_BPB
						JE		BLKDEV_BUILD_BPB
						CMP		AL,DEVREQ_CMD_READ
						JE		BLKDEV_READ
						CMP		AL,DEVREQ_CMD_WRITE
						JE		BLKDEV_WRITE

						TSUGARU_DEBUG

BLKDEV_RETURN:
						RESTORE_WORLD
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BLKDEV_BIOS_FD_HARDERROR:
						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						TEST	CL,DISKBIOS_HARDERROR_DRIVE_NOT_READY
						JNE		BLKDEV_BIOS_DRIVE_NOT_READY

						TEST	CL,DISKBIOS_HARDERROR_WRITE_PROTECTED
						JNE		BLKDEV_BIOS_WRITE_PROTECTED

						TEST	CL,DISKBIOS_HARDERROR_RECORD_NOT_FOUND+DISKBIOS_HARDERROR_CRC_ERROR
						JNE		BLKDEV_BIOS_CRC_ERROR

BLKDEV_BIOS_UNKNOWN_ERROR:
						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR+DEVERR_UNDEFINED
						JMP		BLKDEV_RETURN

BLKDEV_BIOS_DRIVE_NOT_READY:
						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR+DEVERR_DRIVE_NOT_READY
						JMP		BLKDEV_RETURN

BLKDEV_BIOS_WRITE_PROTECTED:
						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR+DEVERR_WRITE_PROTECTED
						JMP		BLKDEV_RETURN

BLKDEV_BIOS_CRC_ERROR:
						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR+DEVERR_CRC_ERROR
						JMP		BLKDEV_RETURN

BLKDEV_BIOS_DEVICE_CODE_ERROR:
						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR+DEVERR_UNKNOWN_UNIT
						JMP		BLKDEV_RETURN


BLKDEV_BIOS_HD_HARDERROR:
						LES		BX,CS:[BLKDEV_REQHDR_PTR]
						TEST	CL,DISKBIOS_HARDERROR_SCSI_DRIVE_NOT_READY
						JNE		BLKDEV_BIOS_DRIVE_NOT_READY

						TEST	CX,DISKBIOS_HARDERROR_SCSI_WRITE_PROTECTED
						JNE		BLKDEV_BIOS_WRITE_PROTECTED

						JMP		BLKDEV_BIOS_UNKNOWN_ERROR


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BLKDEV_INIT:
						; Need to return (ES:BX is the request header)
						; BYTE ES:[BX+REQ_INIT_NUM_UNIT_RETURN]  Number of units, or drives under control of this driver
						; ES:[BX+REQ_INIT_BPB_ARRAY_RETURN]      Far pointer to the BPB array  Let's say it is xxxx:yyyy
						; Then,
						;   xxxx:yyyy ptr0 ptr1 ptr2 ptr3 ... ptr(#unit-1)
						; each pointer is a short pointer. xxxx:ptr0 is the first BPB.

						CALL	AUTOMOUNT_HDD_PARTITIONS

						LES		BX,CS:[BLKDEV_REQHDR_PTR]

						MOV		AL,CS:[NUM_HD_BPB]
						ADD		AL,FIRST_HDD_UNIT_NUMBER	; FD0, FD1, ROMDrv   3 units

						MOV		BYTE ES:[BX+REQ_INIT_NUM_UNIT_RETURN],AL
						MOV		AX,CS
						MOV		ES:[BX+REQ_INIT_BPB_ARRAY_RETURN+2],AX
						MOV		AX,INITIAL_BPB_ARRAY
						MOV		ES:[BX+REQ_INIT_BPB_ARRAY_RETURN],AX

						JMP		BLKDEV_RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

AUTOMOUNT_SCSIID		DB		0
FUJITSU_IN_SHIFTJIS		DB		095H,078H,08EH,06DH,092H,0CAH

AUTOMOUNT_HDD_PARTITIONS:
						XOR		AL,AL
						MOV		BYTE CS:[AUTOMOUNT_SCSIID],0
						MOV		BYTE CS:[NUM_HD_BPB],0

						PUSH	CS
						POP		ES

AUTOMOUNT_HDD_SCSIID_LOOP:
						MOV		AL,CS:[AUTOMOUNT_SCSIID]
						OR		AL,DISKBIOS_SCSI_0

						MOV		CX,0
						MOV		DX,1	; LBA1=partition table

						MOV		BX,BLKDEV_PART_TABLE_SEG
						MOV		DS,BX
						XOR		DI,DI

						MOV		BX,1
						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR

						INT		93H
						JB		AUTOMOUNT_SCSIID_NEXT

						XOR		SI,SI
						MOV		DI,FUJITSU_IN_SHIFTJIS
						MOV		CX,6
						CLD
						REPE	CMPSB
						JNE		AUTOMOUNT_SCSIID_NEXT

						MOV		SI,020H
						MOV		EBX,DS:[6]
						XOR		CX,CX
AUTOMOUNT_HDD_PARTITION_LOOP:
						MOV		AX,BLKDEV_PART_TABLE_SEG
						MOV		DS,AX

						CMP		BYTE [SI+1],1	; BASIC MS-DOS?
						JNE		AUTOMOUNT_HDD_PARTITION_NEXT

						; If the partition type is MS-DOS BASIC, and the IPL sector starts with "IPL4"
						; Add a unit.
						PUSH	SI
						PUSH	CX
						PUSH	EBX

						MOV		AX,BLKDEV_IPL_SEG
						MOV		DS,AX

						SHLD	ECX,EBX,16	; CX:DX is LBA
						MOV		DX,BX

						MOV		BX,1

						MOV		AL,CS:[AUTOMOUNT_SCSIID]
						OR		AL,DISKBIOS_SCSI_0

						XOR		DI,DI
						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						INT		93H
						JB		AUTOMOUNT_HDD_PARTITION_READ_ERROR

						CMP		DWORD DS:[DI],344C5049H
						JNE		AUTOMOUNT_HDD_PARTITION_READ_ERROR

						MOV		AL,CS:[NUM_HD_BPB]
						MOV		AH,BIOS_PARAMETER_BLOCK_size
						MUL		AH
						ADD		AX,HD_BPB

						MOV		DI,AX	; CS:DI is BPB for this partition
						MOV		SI,BPB_POS_IN_IPL
						MOV		CX,BIOS_PARAMETER_BLOCK_size
						REP		MOVSB

						MOV		DI,AX	; CS:DI is BPB for this partition again

						POP		EBX		; EBX is partition LBA
						POP		CX		; CX is partition number
						PUSH	CX
						PUSH	EBX


						MOV		AL,CS:[NUM_HD_BPB]
						MOV		AH,DSKDRV_size
						MUL		AH
						ADD		AX,HD_TABLE
						MOV		SI,AX

						MOV		CS:[SI+DSKDRV_BPB_OFFSET],DI
						MOV		CS:[SI+DSKDRV_BPB_SEG],CS

						MOV		AL,CS:[AUTOMOUNT_SCSIID]
						OR		AL,DISKBIOS_SCSI_0
						MOV		CS:[SI+DSKDRV_BIOSCODE],AL

						MOV		CS:[SI+DSKDRV_PARTITION],CL

						MOV		AL,CS:[NUM_HD_BPB]
						ADD		AL,'D'
						MOV		CS:[SI+DSKDRV_LETTER],AL
						MOV		BYTE CS:[SI+DSKDRV_FLAGS],0
						MOV		CS:[SI+DSKDRV_FIRST_SECTOR_LBA],EBX

						INC		BYTE CS:[NUM_HD_BPB]

AUTOMOUNT_HDD_PARTITION_READ_ERROR:
						POP		EBX
						POP		CX
						POP		SI

AUTOMOUNT_HDD_PARTITION_NEXT:
						ADD		EBX,DS:[SI+6]
						ADD		SI,030H
						INC		CX
						CMP		CX,10
						JB		AUTOMOUNT_HDD_PARTITION_LOOP

AUTOMOUNT_SCSIID_NEXT:
						INC		BYTE CS:[AUTOMOUNT_SCSIID]
						CMP		BYTE CS:[AUTOMOUNT_SCSIID],7
						JB		AUTOMOUNT_HDD_SCSIID_LOOP

						RET


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


BLKDEV_MEDIA_CHECK:
						MOV		AH,ES:[BX+REQ_UNIT]
						MOV		AL,ES:[BX+REQ_MEDIACHECK_MEDIA_DESC]

						CMP		AX,02FBh	; Unit 2 and Media Type is FBh -> ROM Drive
						JE		BLKDEV_MEDIA_CHECK_ROMDRIVE
						CMP		AH,2
						JB		BLKDEV_MEDIA_CHECK_INTERNAL_FD ; Unit 0 or 1 Internal FD

						SUB		AH,FIRST_HDD_UNIT_NUMBER
						CMP		AH,CS:[NUM_HD_BPB]
						JB		BLKDEV_MEDIA_CHECK_HDD

						TSUGARU_DEBUG

						JMP		BLKDEV_RETURN


BLKDEV_MEDIA_CHECK_ROMDRIVE:
						MOV		BYTE ES:[BX+REQ_MEDIACHECK_CODE_RETURN],MEDIACHECK_CODE_UNCHANGED
						MOV		DWORD ES:[BX+REQ_MEDIACHECK_VOLUME_LABEL_RETURN],0  ; How can I get this???
						JMP		BLKDEV_RETURN

BLKDEV_MEDIA_CHECK_INTERNAL_FD:
						OR		AH,20H
						MOV		AL,AH
						MOV		AH,DISKBIOS_CMD_YS_CHECK_DISK_CHANGE
						MOV		BH,1	; Clear disk-change flag (if drive ready)
						INT		93H

						; ES:BX no longer points to the request header.
						LES		BX,CS:[BLKDEV_REQHDR_PTR]	; Re-fetch the pointer.

						; Tentatively mark as no change
						MOV		BYTE ES:[BX+REQ_MEDIACHECK_CODE_RETURN],MEDIACHECK_CODE_UNCHANGED
						MOV		DWORD ES:[BX+REQ_MEDIACHECK_VOLUME_LABEL_RETURN],0  ; How can I get this???

						CMP		AL,2	; Drive Not Ready
						JNE		BLKDEV_MEDIA_CHECK_INTERNAL_FD_DRVRDY

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR+DEVERR_DRIVE_NOT_READY
						JE		BLKDEV_RETURN

BLKDEV_MEDIA_CHECK_INTERNAL_FD_DRVRDY:
						OR		AL,AL
						JE		BLKDEV_RETURN

						; Probably it is a good place to try different media type and set Disk Drive Mode for the media.
						; TODO: Check Media Type and Set Up Disk BIOS Accordingly

						MOV		BYTE ES:[BX+REQ_MEDIACHECK_CODE_RETURN],MEDIACHECK_CODE_CHANGED
						MOV		DWORD ES:[BX+REQ_MEDIACHECK_VOLUME_LABEL_RETURN],0  ; How can I get this??? The previous disk has gone already!

						JMP		BLKDEV_RETURN


BLKDEV_MEDIA_CHECK_HDD:
						MOV		AL,ES:[BX+REQ_UNIT]
						SUB		AL,FIRST_HDD_UNIT_NUMBER
						MOV		AH,BIOS_PARAMETER_BLOCK_size
						MUL		AH
						ADD		AX,HD_BPB
						MOV		DI,AX

						CMP		WORD CS:[DI+BPB_BYTES_PER_SECTOR],0
						JE		BLKDEV_BIOS_DRIVE_NOT_READY

						MOV		BYTE ES:[BX+REQ_MEDIACHECK_CODE_RETURN],MEDIACHECK_CODE_UNCHANGED
						MOV		DWORD ES:[BX+REQ_MEDIACHECK_VOLUME_LABEL_RETURN],0  ; How can I get this???
						JMP		BLKDEV_RETURN


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BLKDEV_READ:
						MOV		AH,ES:[BX+REQ_UNIT]
						MOV		AL,ES:[BX+REQ_READ_WRITE_MEDIA_DESC]

						CMP		AX,02FBh	; Unit 2 and Media Type is FBh -> ROM Drive
						JE		BLKDEV_READ_ROMDRIVE
						CMP		AH,2
						JB		BLKDEV_READ_INTERNAL_FD ; Unit 0 or 1 Internal FD

						SUB		AH,FIRST_HDD_UNIT_NUMBER
						CMP		AH,CS:[NUM_HD_BPB]
						JB		BLKDEV_READ_HDD

						TSUGARU_DEBUG

						JMP		BLKDEV_RETURN


BLKDEV_READ_ROMDRIVE:
						MOV		AL,DISKBIOS_ROMDISK
						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						MOV		CX,0
						MOV		DX,ES:[BX+REQ_READ_WRITE_LBA]
						MOV		DS,ES:[BX+REQ_READ_WRITE_BUFFER_SEG]
						MOV		DI,ES:[BX+REQ_READ_WRITE_BUFFER_PTR]
						MOV		BX,ES:[BX+REQ_READ_WRITE_SECTOR_COUNT]	; Do BX last.  Need ES:BX for other parameters.
						INT		93H

						LES		BX,CS:[BLKDEV_REQHDR_PTR]

						JMP		BLKDEV_RETURN


BLKDEV_READ_INTERNAL_FD:
						MOV		AH,DISKBIOS_CMD_01H_GET_DRV_MODE
						MOV		AL,ES:[BX+REQ_UNIT]
						OR		AL,20H
						XOR		CH,CH
						INT		93H

						CMP		AH,80h
						JE		BLKDEV_BIOS_FD_HARDERROR
						CMP		AH,02H
						JE		BLKDEV_BIOS_DEVICE_CODE_ERROR

						; Now BH=number of heads, and BL=sectPerTrack
						OR		BH,BH
						JE		BLKDEV_BIOS_UNKNOWN_ERROR
						OR		BL,BL
						JE		BLKDEV_BIOS_UNKNOWN_ERROR

						MOV		DX,BX	; DH is number of heads, DL is sectPerTrack

						; ES:BX no longer points to the request header.

						LES		BX,CS:[BLKDEV_REQHDR_PTR]	; ES:BX is request header again.

						MOV		AX,ES:[BX+REQ_READ_WRITE_LBA]
						DIV		DL

						; AH is sector number.  AL is track (C*2+H)

						INC		AH		; Sector number starts with 1, not 0.
						MOV		DL,AH	; DL is sector number

						MOVZX	AX,AL
						DIV		DH

						; AL is Cylinder,  AH is head

						MOVZX	CX,AL	; CX is cylinder
						MOV		DH,AH	; DH is head

						MOV		DS,ES:[BX+REQ_READ_WRITE_BUFFER_SEG]
						MOV		DI,ES:[BX+REQ_READ_WRITE_BUFFER_PTR]

						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						MOV		AL,ES:[BX+REQ_UNIT]
						OR		AL,20H

						MOV		BX,ES:[BX+REQ_READ_WRITE_SECTOR_COUNT]	; Do BX last.  Need ES:BX for other parameters.
						INT		93H

						CMP		AH,80h
						JE		BLKDEV_BIOS_FD_HARDERROR
						CMP		AH,02H
						JE		BLKDEV_BIOS_DEVICE_CODE_ERROR

						JMP		BLKDEV_RETURN


BLKDEV_READ_HDD:
						PUSH	CS
						POP		FS

						MOV		AL,ES:[BX+REQ_UNIT]
						SUB		AL,FIRST_HDD_UNIT_NUMBER
						MOV		AH,BIOS_PARAMETER_BLOCK_size
						MUL		AH
						ADD		AX,HD_BPB
						MOV		DI,AX		; FS:DI is BPB for this drive.

						CMP		WORD FS:[DI+BPB_BYTES_PER_SECTOR],0
						JE		BLKDEV_BIOS_DRIVE_NOT_READY

						MOV		AL,ES:[BX+REQ_UNIT]
						SUB		AL,FIRST_HDD_UNIT_NUMBER
						MOV		AH,DSKDRV_size
						MUL		AH
						ADD		AX,HD_TABLE
						MOV		SI,AX		; CS:SI is 

						MOV		AX,ES:[BX+REQ_READ_WRITE_LBA]

						; EAX is the number of logical sectors from the beginning of the partition.

						CALL	BPB_LOGICAL_SECTOR_TO_HD_LBA

						; EAX is the number of physical sectors from the beginning of the partition.

						ADD		EAX,CS:[SI+DSKDRV_FIRST_SECTOR_LBA]

						; EAX is the LBA.

						SHLD	ECX,EAX,16
						MOV		DX,AX		; CX|DX is LBA

						MOV		AX,ES:[BX+REQ_READ_WRITE_SECTOR_COUNT]	; Do BX last.  Need ES:BX for other parameters.

						CALL	BPB_LOGICAL_SECTOR_TO_HD_LBA
						MOV		DI,BX			; Now ES:DI is the request header.
						MOV		EBX,EAX

						; EAX is the number of physical sectors to read.  Do it in the end.  ES:BX is needed for other things until this point.

						LDS		DI,ES:[DI+REQ_READ_WRITE_BUFFER_PTR]

						MOV		AL,CS:[SI+DSKDRV_BIOSCODE]
						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR

						INT		93H

						CMP		AH,80h
						JE		BLKDEV_BIOS_HD_HARDERROR
						CMP		AH,02h
						JE		BLKDEV_BIOS_DEVICE_CODE_ERROR

						JMP		BLKDEV_RETURN



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BLKDEV_WRITE:
						MOV		AH,ES:[BX+REQ_UNIT]
						MOV		AL,ES:[BX+REQ_READ_WRITE_MEDIA_DESC]

						CMP		AX,02FBh	; Unit 2 and Media Type is FBh -> ROM Drive
						JE		BLKDEV_WRITE_ROMDRIVE
						CMP		AH,2
						JB		BLKDEV_WRITE_INTERNAL_FD ; Unit 0 or 1 Internal FD

						TSUGARU_DEBUG

						JMP		BLKDEV_RETURN

BLKDEV_WRITE_ROMDRIVE:
						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR+DEVERR_WRITE_PROTECTED
						JMP		BLKDEV_RETURN

BLKDEV_WRITE_INTERNAL_FD:
						MOV		AH,DISKBIOS_CMD_01H_GET_DRV_MODE
						MOV		AL,ES:[BX+REQ_UNIT]
						OR		AL,20H
						XOR		CH,CH
						INT		93H

						CMP		AH,80h
						JE		BLKDEV_BIOS_FD_HARDERROR
						CMP		AH,02H
						JE		BLKDEV_BIOS_DEVICE_CODE_ERROR

						; Now BH=number of heads, and BL=sectPerTrack
						OR		BH,BH
						JE		BLKDEV_BIOS_UNKNOWN_ERROR
						OR		BL,BL
						JE		BLKDEV_BIOS_UNKNOWN_ERROR

						MOV		DX,BX	; DH is number of heads, DL is sectPerTrack

						; ES:BX no longer points to the request header.

						LES		BX,CS:[BLKDEV_REQHDR_PTR]	; ES:BX is request header again.

						MOV		AX,ES:[BX+REQ_READ_WRITE_LBA]
						DIV		DL

						; AH is sector number.  AL is track (C*2+H)

						INC		AH		; Sector number starts with 1, not 0.
						MOV		DL,AH	; DL is sector number

						MOVZX	AX,AL
						DIV		DH

						; AL is Cylinder,  AH is head

						MOVZX	CX,AL	; CX is cylinder
						MOV		DH,AH	; DH is head

						MOV		DS,ES:[BX+REQ_READ_WRITE_BUFFER_SEG]
						MOV		DI,ES:[BX+REQ_READ_WRITE_BUFFER_PTR]

						MOV		AH,DISKBIOS_CMD_06H_WRITE_SECTOR
						MOV		AL,ES:[BX+REQ_UNIT]
						OR		AL,20H

						MOV		BX,ES:[BX+REQ_READ_WRITE_SECTOR_COUNT]	; Do BX last.  Need ES:BX for other parameters.
						INT		93H

						CMP		AH,80h
						JE		BLKDEV_BIOS_FD_HARDERROR
						CMP		AH,02H
						JE		BLKDEV_BIOS_DEVICE_CODE_ERROR

						JMP		BLKDEV_RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

BLKDEV_BUILD_BPB:
						MOV		AH,ES:[BX+REQ_UNIT]
						MOV		AL,ES:[BX+REQ_READ_WRITE_MEDIA_DESC]

						CMP		AX,02FBh	; Unit 2 and Media Type is FBh -> ROM Drive
						JE		BLKDEV_BUILD_BPB_ROMDRIVE
						CMP		AH,2
						JB		BLKDEV_BUILD_BPB_INTERNAL_FD

						SUB		AH,FIRST_HDD_UNIT_NUMBER
						CMP		AH,CS:[NUM_HD_BPB]
						JB		BLKDEV_BUILD_BPB_HDD

						TSUGARU_DEBUG

						JMP		BLKDEV_RETURN

BLKDEV_BUILD_BPB_ROMDRIVE:
						MOV		WORD ES:[BX+REQ_BUILDBPB_PTR_RETURN],ROMDRIVE_BPB
						MOV		ES:[BX+REQ_BUILDBPB_PTR_RETURN+2],CS
						JMP		BLKDEV_RETURN


BLKDEV_BUILD_BPB_INTERNAL_FD:
						MOV		AL,ES:[BX+REQ_UNIT]
						OR		AL,20H
						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
						XOR		CX,CX	; Cylinder=0
						MOV		DX,1	; Sector=1, Head=0
						LDS		DI,CS:[SECTBUF_PTR]
						MOV		BX,1	; Do BX last.  May need ES:BX for other parameters.
						INT		93H

						; ES:BX no longer points to the request header.
						LES		BX,CS:[BLKDEV_REQHDR_PTR]	; Re-fetch the pointer.

						ADD		DI,BPB_POS_IN_IPL
						MOV		ES:[BX+REQ_BUILDBPB_PTR_RETURN],DI
						MOV		ES:[BX+REQ_BUILDBPB_PTR_RETURN+2],DS

						JMP		BLKDEV_RETURN

;BLKDEV_BUILD_BPB_LBA:
;						MOV		AL,
;						MOV		AH,DISKBIOS_CMD_05H_READ_SECTOR
;						XOR		CX,CX	; Sector LBA High=0
;						XOR		DX,DX	; Sector LBA Low=0
;						LDS		DI,CS:[SECTBUF_PTR]
;						MOV		BX,1	; Do BX last.  May need ES:BX for other parameters.
;						INT		93H
;
;						; ES:BX no longer points to the request header.
;						LES		BX,CS:[BLKDEV_REQHDR_PTR]	; Re-fetch the pointer.
;
;						ADD		DI,BPB_POS_IN_IPL
;						MOV		ES:[BX+REQ_BUILDBPB_PTR_RETURN],DI
;						MOV		ES:[BX+REQ_BUILDBPB_PTR_RETURN+2],DS
;
;						TSUGARU_DEBUG
;
;						JMP		BLKDEV_RETURN

BLKDEV_BUILD_BPB_HDD:
						MOV		AL,ES:[BX+REQ_UNIT]
						SUB		AL,FIRST_HDD_UNIT_NUMBER
						MOV		AH,BIOS_PARAMETER_BLOCK_size
						MUL		AH
						ADD		AX,HD_BPB

						MOV		ES:[BX+REQ_BUILDBPB_PTR_RETURN],AX
						MOV		ES:[BX+REQ_BUILDBPB_PTR_RETURN+2],CS

						JMP		BLKDEV_RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

