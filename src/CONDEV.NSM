CONDEV_HEADER_NEXT			DW		CLKDEV_HEADER_NEXT
							DW		IOSYS_CS
CONDEV_HEADER_ATTRIBWORD	DW		8003h
CONDEV_HEADER_STRATEGY_PTR	DW		CONDEV_STRATEGY
CONDEV_HEADER_INTERRUPT_PTR	DW		CONDEV_INTERRUPT
CONDEV_HEADER_NAME			DB		"CON     "

CONDEV_REQHDR_PTR		DD	0

CONDEV_STRATEGY:
						MOV		CS:[CONDEV_REQHDR_PTR],BX
						MOV		CS:[CONDEV_REQHDR_PTR+2],ES
						RETF

CONDEV_INTERRUPT:
						SAVE_WORLD

						LES		BX,CS:[CONDEV_REQHDR_PTR]

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_NOERROR ; Tentatively no error
						MOV		AL,ES:[BX+REQ_COMMAND]
						CMP		AL,DEVREQ_CMD_INIT
						JE		CONDEV_INIT
						CMP		AL,DEVREQ_CMD_READ
						JE		CONDEV_READ
						CMP		AL,DEVREQ_CMD_WRITE
						JE		CONDEV_WRITE
						CMP		AL,DEVREQ_CMD_NON_DEST_READ
						JE		CONDEV_NON_DESTRUCTIVE_READ

						TSUGARU_DEBUG

CONDEV_INTERRUPT_RETURN:
						RESTORE_WORLD
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

KEYCODE_TO_ASCII:
						DB		00H,00H,31H,32H,33H,34H,35H,36H,37H,38H,39H,30H,2dH,5eH,5cH,08H
						DB		09H,71H,77H,65H,72H,74H,79H,75H,69H,6fH,70H,40H,5bH,0dH,61H,73H
						DB		64H,66H,67H,68H,6aH,6bH,6cH,3bH,3aH,5dH,7aH,78H,63H,76H,62H,6eH
						DB		6dH,2cH,2eH,2fH,00H,20H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,21H,22H,23H,24H,25H,26H,27H,28H,29H,00H,3dH,7eH,7cH,00H
						DB		00H,51H,57H,45H,52H,54H,59H,55H,49H,4fH,50H,60H,7bH,00H,41H,53H
						DB		44H,46H,47H,48H,4aH,4bH,4cH,2bH,2aH,7dH,00H,58H,43H,56H,42H,4eH
						DB		4dH,3cH,3eH,3fH,5fH,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CONDEV_INIT:

						JMP		CONDEV_INTERRUPT_RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CONDEV_READ:
						MOV		WORD ES:[BX+REQ_READ_WRITE_SECTOR_COUNT],1 ; Is it always one byte at a time?

						MOV		CX,ES:[BX+REQ_READ_WRITE_SECTOR_COUNT]
						LDS		DI,ES:[BX+REQ_READ_WRITE_BUFFER_PTR]
						STI
CONDEV_READ_LOOP:
						MOV		AX,0900H	; READ (AH=09H) with Blocking (AL=00H)
						INT		90H

						CMP		DH,0FFH
						JE		CONDEV_READ_LOOP

						TEST	DL,80H
						JNE		CONDEV_READ_LOOP

						MOV		DH,BL
						SHL		DH,6
						AND		DH,80H

						AND		DL,7FH
						OR		DL,DH

						MOVZX	SI,DL
						MOV		DH,CS:[KEYCODE_TO_ASCII+SI]
						OR		DH,DH

						JE		CONDEV_READ_LOOP

						MOV		[DI],DH
						INC		DI
						LOOP	CONDEV_READ_LOOP

						JMP		CONDEV_INTERRUPT_RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CONDEV_NON_DESTRUCTIVE_READ:
						LDS		DI,ES:[BX+REQ_READ_WRITE_BUFFER_PTR]
						STI

						MOV		AH,07H
						INT		90H

						CMP		DH,0FFH
						JE		CONDEV_NON_DESTRUCTIVE_READ_NO_INPUT

						TEST	DL,80H	; Key-Break (Release)?
						JNE		CONDEV_NON_DESTRUCTIVE_READ_NO_INPUT

						MOV		DH,BL
						SHL		DH,6
						AND		DH,80H	; Shift

						AND		DL,7FH
						OR		DL,DH

						MOVZX	SI,DL
						MOV		DH,CS:[KEYCODE_TO_ASCII+SI]
						OR		DH,DH

						JE		CONDEV_NON_DESTRUCTIVE_READ_NO_INPUT

						MOV		ES:[BX+0DH],DH
						JMP		CONDEV_INTERRUPT_RETURN


CONDEV_NON_DESTRUCTIVE_READ_NO_INPUT:
						LES		BX,CS:[CONDEV_REQHDR_PTR]	; BX may be destroyed.
						MOV		WORD ES:[BX+REQ_STATUS],CONSDEV_FLAG_BUSY
						JMP		CONDEV_INTERRUPT_RETURN

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

CONDEV_WRITE:
						; Just for test. Always write "A\n"
						LDS		DI,ES:[BX+REQ_READ_WRITE_BUFFER_PTR]
						MOV		AL,DS:[DI]
						MOV		AH,1DH	; Console BIOS 1-char Output
						INT		91H
						JMP		CONDEV_INTERRUPT_RETURN

