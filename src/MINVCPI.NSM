; Minimum VCPI driver to run Free386 DOS Extender
; Let's see how far I can go.

						CPU		386
						BITS	16

						%INCLUDE "UTIL.NSM"
						%INCLUDE "DEF.NSM"


						DD      0FFFFFFFFh                  ; SYSDEV_NEXT				
						DW      SYSDEV_DEVFLAG_IS_CHARDEV   ; SYSDEV_DEVFLAGS			
						DW      STRATEGY                    ; SYSDEV_STRATEGY			
						DW      INTERRUPT                   ; SYSDEV_INTERRUPT		
						DB      "EMMXXXX0"                  ; SYSDEV_NAME        		


XMS_MEMORY_START		EQU		0C0000H
XMS_START_HIWORD		EQU		(XMS_MEMORY_START/010000H)
XMS_START_LOWORD		EQU		(XMS_MEMORY_START&0FFFFH)


REQ_HEADER				DD		0
CASCADE_INT2F			DD		0

STRATEGY:
						MOV		CS:[REQ_HEADER],BX
						MOV		CS:[REQ_HEADER+2],ES
						RETF

INTERRUPT:
						SAVE_WORLD

						LES		BX,CS:[REQ_HEADER]

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_ERROR

						MOV		AL,ES:[BX+REQ_COMMAND]
						CMP		AL,DEVREQ_CMD_INIT
						JNE		INTERRUPT_EXIT

						MOV		WORD ES:[BX+REQ_STATUS],DEVREQ_STATUS_NOERROR

						XOR		AX,AX
						MOV		DS,AX

						MOV		EAX,[4*02FH]
						MOV		CS:[CASCADE_INT2F],EAX

						MOV		AX,CS
						SHL		EAX,16
						MOV		AX,INT_67H
						MOV		[4*067H],EAX
						MOV		AX,INT_2FH
						MOV		[4*02FH],EAX

						MOV		WORD ES:[BX+REQ_INIT_END_OF_RESIDENT_CODE_RETURN],END_OF_MINVCPI
						MOV		ES:[BX+REQ_INIT_END_OF_RESIDENT_CODE_RETURN+2],CS

INTERRUPT_EXIT:
						RESTORE_WORLD
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT_67H:
						CMP		AX,0DE00H
						JE		INT_67H_DE00H
						CMP		AX,0DE02H
						JE		INT_67H_DE02H
						CMP		AX,0DE06H
						JE		INT_67H_DE06H
						CMP		AX,0DE01H
						JE		INT_67H_DE01H
						CMP		AX,0DE0CH
						JE		INT_67H_DE0CH

						TSUGARU_DEBUG
						IRET

INT_67H_DE00H:
						XOR		AH,AH	; Pretend VCPI installed.
						IRET

INT_67H_DE02H:			; Return RAM capacity in bytes.
						PUSH	BX
						PUSH	AX

						CALL	GET_MEMORY_CAPACITY
						;Output  EDX=RAM size in bytes.
						;        BX=Dextroyed
						;        AX=Destroyed
						SUB		EDX,4096	; Apparently it needs to be the physical address of the last page.

						POP		AX
						POP		BX
						IRET

; Page to Physical Address of the First 1MB
; Input CX=Page
; Output EDX=Physical Address
INT_67H_DE06H:
						; I am not in the God Damn VM86 mode.  Just bit shift.
						; I wish Intel guys had not come up with this VM86-mode ****shit.
						MOVZX	EDX,CX
						SHL		EDX,12
						IRET


; Initialize First Page Table, setup 3 GDT descriptors, and return the first unused page and Protected-Mode Entry Point.
; Should I return the first uninitialized page?  Or, the page is used, but not allocated?
; Input ES:DI=First Page Table
;       DS:SI=GDT Pointer to the 3 descriptors
; Output AH=0
;        DI=Points to the first unused page table entry in the buffer.
;        EBX=Protected Mode Entry Point.
INT_67H_DE01H:
						; I am not in the God Damn VM86 mode.  First 1MB maps exactly to the physical address.
						; I wish Intel guys had not come up with this VM86-mode ****shit.

						; DOS6.2 VCPI reserved 42Ch.  42Ch/4=267 entries.  267*4KB=1064KB.
						; So, VCPI takes all RAM under 1064KB?  Can't the protected-mode apps use first 1064KB?

						; OK.  So be it.  Take first 1064KB.
						PUSH	EAX
						PUSH	CX
						MOV		CX,42Ch/4
						MOV		EAX,0067H	; Dirty|Avail|U/S|R/W|Present

INT_67H_DE01H_LOOP:		STOSD
						ADD		EAX,1000h	; Increment 4K
						LOOP	INT_67H_DE01H_LOOP

						; Keep DI here.  DI return should be the pointer to the next page-table entry.

						MOV		AX,CS
						MOVZX	EAX,AX
						SHL		EAX,4

						; EAX is the linear base of this CS.
						MOV		WORD [SI],0FFFFh
						MOV		[SI+2],AX
						ROL		EAX,16
						MOV		[SI+4],AL
						MOV		[SI+7],AH

						MOV		WORD [SI+5],009AH	; Byte Granularity, 16-bit operand, A=1, Present=1, DPL=0, Type=1AH(SEGTYPE_CODE_NONCONFORMING_READABLE)

						MOV		EAX,[SI]
						MOV		[SI+8],EAX
						MOV		EAX,[SI+4]
						MOV		[SI+12],EAX

						MOV		WORD [SI+8+5],0092H	; Same as CS, Type=12H(SEGTYPE_DATA_NORMAL_RW)

						; I don't know what to do with the third selector.
						XOR		EAX,EAX
						MOV		[SI+16],EAX
						MOV		[SI+20],EAX

						POP		CX
						POP		EAX

						XOR		AH,AH
						MOV		EBX,PROTECTED_MODE_ENTRY

						IRET


; Jump to the protected mode.
INT_67H_DE0CH:
						TSUGARU_DEBUG
						MOV		EAX,ESI
						SHR		EAX,4
						MOV		DS,AX
						AND		SI,0Fh

						MOV		EAX,[SI]
						MOV		CR3,EAX

						MOV		EAX,[SI+4]
						SHR		EAX,4
						MOV		ES,AX
						MOV		EAX,[SI+4]
						AND		EAX,0Fh
						LGDT	ES:[EAX]

						MOV		EAX,[SI+8]
						SHR		EAX,4
						MOV		ES,AX
						MOV		EAX,[SI+8]
						AND		EAX,0Fh
						LIDT	ES:[EAX]

						LLDT	[SI+0CH]
						LTR		[SI+0EH]

						MOV		EAX,CR0
						OR		EAX,80000001H
						MOV		CR0,EAX

						JMP		FAR DWORD [SI+10H]

						HLT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT_2FH:
						; Looks like Free386 uses only the following two functions of INT 2FH
						CMP		AX,4310H
						JE		MY_INT2FH_4310H
						CMP		AX,4300H
						JE		MY_INT2FH_4300H
						JMP		FAR [CS:CASCADE_INT2F]

MY_INT2FH_4300H:
						MOV		AL,80H	; Pretend XMS Installed.
						IRET

MY_INT2FH_4310H:
						MOV		BX,CS
						MOV		ES,BX
						MOV		BX,XMS_WANNABE_ENTRY
						IRET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

XMS_WANNABE_ENTRY:
						TEST	AH,AH
						JE		XMS_GETVERSION
						CMP		AH,0CH
						JE		XMS_LOCK
						CMP		AH,88h
						JE		XMS_INQUIRE_AVAILABLE_MEMORY
						CMP		AH,89h
						JE		XMS_ALLOC_MEMORY

						RETF

XMS_GETVERSION:
						MOV		AH,3	; Pretend to be Version 3
						RETF

XMS_INQUIRE_AVAILABLE_MEMORY:
						PUSH	EBX

						CALL	GET_MEMORY_CAPACITY
						;Output  EDX=RAM size in bytes.
						;        BX=Dextroyed
						;        AX=Destroyed

						; Nobody else is using upper memory.  Therefore, everything 0C0000h and above is available.

						SUB		EDX,0C0000h
						SHR		EDX,10	; Available continuous memory in KB
						MOV		EAX,EDX	; Available memoroy in KB
						XOR		ECX,ECX	; Free386 seems to excpet ECX to be zero.

						POP		EBX
						XOR		BL,BL

						RETF

XMS_ALLOC_MEMORY:
						; Free386 allocates all memory.  Sure.  I give it to Free386.  Nobody else is supposed to
						; touch the upper memory.
						MOV		AX,1	; Success
						MOV		DX,1
						RETF


XMS_LOCK:
						; OK.  Everything is locked.  Locked from the beginning.
						MOV		AX,1	; Success
						MOV		DX,XMS_START_HIWORD
						MOV		BX,XMS_START_LOWORD
						RETF

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;Output  EDX=RAM size in bytes.
;        BX=Dextroyed
;        AX=Destroyed
GET_MEMORY_CAPACITY:
						MOV		DX,3150H	; (RAMinMB-1) times FFs
						XOR		BX,BX

GET_MEMORY_CAPACITY_LOOP:
						INC		BX
						IN		AL,DX
						ADD		DX,2
						CMP		AL,0FFh
						JE		GET_MEMORY_CAPACITY_LOOP

						; BX=Number_of_FFs+1

						INC		BX
						SHR		BX,1

						; BX=(Number_of_FFs+2)/2

						MOVZX	EDX,BX
						SHL		EDX,20

						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PROTECTED_MODE_ENTRY:
						JMP		PROTECTED_MODE_ENTRY

END_OF_MINVCPI:			DB		"by CaptainYS.  FM-series forever! (Excluding FM-V.  I don't care FM-V.)",0

