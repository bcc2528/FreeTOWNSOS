; INT 90H Keyboard BIOS

						CPU		386
						BITS	16

						%INCLUDE "UTIL.NSM"
						%INCLUDE "DEF.NSM"
						%INCLUDE "TOWNSDEF.NSM"
						%INCLUDE "IODEF.NSM"


CODE					SEGMENT USE16

INT90H:
						SAVE_WORLD
						MOV		BP,SP

						MOV		BYTE CS:[ERROR_CODE],0ffh	; Tentatively error

						CMP		AH,0FH
						JA		INT90H_EXIT

						MOV		BYTE CS:[ERROR_CODE],0		; Tentatively no error

						MOVZX	BX,AH
						SHL		BX,1
						JMP		[CS:BX+INT90H_JUMPTABLE]



INT90H_EXIT:
						RESTORE_WORLD

						MOV		AH,CS:[ERROR_CODE]

INT90H_NOT_HARD_ERROR:
						AND		AH,AH
						CLC
						JE		INT90H_IRET
						STC
INT90H_IRET:
						IRET

INT90H_JUMPTABLE:
						DW		INT90H_00H_INIT
						DW		INT90H_01H_SET_BUFFERING
						DW		INT90H_02H_SET_CODE_SYSTEM
						DW		INT90H_03H_GET_CODE_SYTEM
						DW		INT90H_04H_CONTROL_KEYBOARD_LOCK
						DW		INT90H_05H_CONTROL_CLICK_SOUND
						DW		INT90H_06H_CLEAR_BUFFER
						DW		INT90H_07H_CHECK_INPUT
						DW		INT90H_08H_READ_SHIFT_KEY
						DW		INT90H_09H_READ
						DW		INT90H_0AH_MATRIX_INPUT
						DW		INT90H_0BH_ADD_INPUT_STRING
						DW		INT90H_0CH_REGISTER_PFKEY_INT_HANDLER
						DW		INT90H_0DH_GET_PFKEY_INT_HANDLER
						DW		INT90H_0EH_KEY_ASSIGNMENT
						DW		INT90H_0FH_READ_KEY_STATE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

KEYBUF_LEN				EQU		16
KEYBUF_LEN_MASK			EQU		(KEYBUF_LEN-1)
KEYBUF					DW		KEYBUF_LEN dup(0)
KEYBUF_WRITEPTR			DW		0
KEYBUF_READPTR			DW		0
KEYBUF_DATA_FIRST_BYTE	DB		0

KEY_MATRIX_LEN			EQU		16
KEY_MATRIX				DB		KEY_MATRIX_LEN dup (0)

BIOS_CODESYS_MODE_MASK	EQU		0C000h
BIOS_MODE_ENCODE		EQU		0
BIOS_MODE_SCAN			EQU		4000h

BIOS_ASCII_OR_JIS_MASK	EQU		300h
BIOS_ASCII				EQU		0
BIOS_JIS				EQU		200h

BIOS_KEY_MASK_MASK		EQU		0Fh
BIOS_KEY_MASK_COMM		EQU		08h
BIOS_KEY_MASK_EDIT		EQU		04h
BIOS_KEY_MASK_FUNC		EQU		02h
BIOS_KEY_MASK_CHR		EQU		01h

BIOS_CODE_SYSTEM		DW		0

BIOS_KEY_LOCK			DB		0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

KEYCODE_TO_ASCII:
						DB		00H,1BH,31H,32H,33H,34H,35H,36H,37H,38H,39H,30H,2dH,5eH,5cH,08H ; 00H
						DB		09H,71H,77H,65H,72H,74H,79H,75H,69H,6fH,70H,40H,5bH,0dH,61H,73H ; 10H
						DB		64H,66H,67H,68H,6aH,6bH,6cH,3bH,3aH,5dH,7aH,78H,63H,76H,62H,6eH ; 20H
						DB		6dH,2cH,2eH,2fH,00H,20H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; 30H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,1eH,00H,1dH ; 40H
						DB		1fH,1cH,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; 50H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; 60H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; 70H
						DB		00H,00H,21H,22H,23H,24H,25H,26H,27H,28H,29H,00H,3dH,7eH,7cH,00H ; 80H
						DB		00H,51H,57H,45H,52H,54H,59H,55H,49H,4fH,50H,60H,7bH,00H,41H,53H ; 90H
						DB		44H,46H,47H,48H,4aH,4bH,4cH,2bH,2aH,7dH,00H,58H,43H,56H,42H,4eH ; A0H
						DB		4dH,3cH,3eH,3fH,5fH,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; B0H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; C0H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; D0H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; E0H
						DB		00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H,00H ; F0H

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT41H_INT_DATABLOCK:
						DB		0,0
						DW		INT41H_HANDLER
						DW		0

INT41H_HANDLER:
						MOV		SI,CS:[BIOS_CODE_SYSTEM]
						AND		SI,BIOS_CODESYS_MODE_MASK

						MOV		DX,IO_KEYBOARD_INT_REASON
						IN		AL,DX
						TEST	AL,1	; KBINT otherwise NMI
						JE		INT41H_HANDLER_DUMMY_READ_AND_EXIT

						MOV		DX,IO_KEYBOARD_DATA
						IN		AL,DX
						TEST	AL,80h
						JE		INT41H_DATA_IS_SECOND_BYTE

						MOV		CS:[KEYBUF_DATA_FIRST_BYTE],AL
						JMP		INT41H_HANDLER_EXIT

INT41H_DATA_IS_SECOND_BYTE:
						MOV		AH,CS:[KEYBUF_DATA_FIRST_BYTE]	; AX is 2-byte key data.
						TEST	AH,80H
						JE		INT41H_HANDLER_EXIT				; Something is wrong.  Discard the data.

						; Update key bitmap

						MOVZX	BX,AL
						SHR		BX,3
						MOV		CL,AL
						AND		CL,7
						MOV		CH,1
						SHL		CH,CL

						TEST	AH,010H
						JNE		INT41H_DATA_IS_KEY_RELEASE
; IS_KEY_PRESS:
						OR		CS:[KEY_MATRIX+BX],CH

						; Do not push a key that does not make a chr if encode mode.
						CMP		SI,BIOS_MODE_ENCODE
						JNE		INT41H_MATRIX_UPDATE_DONE

						CMP		BYTE CS:[BIOS_KEY_LOCK],1
						JE		INT41H_HANDLER_EXIT	; In Encode Mode and Key Locked, don't push to the buffer.

						MOVZX	BX,AH
						AND		BL,4
						SHL		BL,5
						OR		BL,AL
						CMP		BYTE CS:[KEYCODE_TO_ASCII+BX],0
						JE		INT41H_HANDLER_EXIT

						JMP		INT41H_MATRIX_UPDATE_DONE
INT41H_DATA_IS_KEY_RELEASE:
						NOT		CH
						AND		CS:[KEY_MATRIX+BX],CH

						; Do not push Key-Release if encode mode.
						CMP		SI,BIOS_MODE_ENCODE
						JE		INT41H_HANDLER_EXIT

INT41H_MATRIX_UPDATE_DONE:

						CMP		AL,7FH	; 7FH seems to be a response to a unpublished command.  Don't push it to the buffer.
						JE		INT41H_HANDLER_EXIT

						CALL	PUSH_BACK_KEYCODE

INT41H_HANDLER_EXIT:
						RETF

INT41H_HANDLER_DUMMY_READ_AND_EXIT:
						MOV		DX,IO_KEYBOARD_DATA
						IN		AL,DX
						JMP		INT41H_HANDLER_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Input
;   AX  Key code
; OUtput
;   Key-code buffer grows.
;   BX  Destroyed
PUSH_BACK_KEYCODE:
						MOV		BX,CS:[KEYBUF_WRITEPTR]
						INC		BX
						AND		BX,KEYBUF_LEN_MASK
						CMP		BX,CS:[KEYBUF_READPTR]
						JE		PUSH_BACK_KEYCODE_EXIT		; Jump if buffer is full

						MOV		BX,CS:[KEYBUF_WRITEPTR]
						SHL		BX,1
						MOV		CS:[KEYBUF+BX],AX

						SHR		BX,1
						INC		BX
						AND		BX,KEYBUF_LEN_MASK
						MOV		CS:[KEYBUF_WRITEPTR],BX

PUSH_BACK_KEYCODE_EXIT:
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Return
;   CF=0  AX key code
;   CF=1  Key buf empty
READ_KEYBUF:
						PUSH	BX
						PUSHF
						CLI

						MOV		BX,CS:[KEYBUF_READPTR]
						CMP		BX,CS:[KEYBUF_WRITEPTR]
						JE		READ_KEYBUF_NOT_FILLED

						SHL		BX,1
						MOV		AX,CS:[KEYBUF+BX]
						SHR		BX,1
						INC		BX
						AND		BX,KEYBUF_LEN_MASK
						MOV		CS:[KEYBUF_READPTR],BX

						POPF
						POP		BX
						CLC
						RET

READ_KEYBUF_NOT_FILLED:
						POPF
						POP		BX
						STC
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Return
;   CF=0  AX key code
;   CF=1  Key buf empty
PEEK_KEYBUF:
						PUSH	BX
						PUSHF
						CLI

						MOV		BX,CS:[KEYBUF_READPTR]
						CMP		BX,CS:[KEYBUF_WRITEPTR]
						JE		READ_KEYBUF_NOT_FILLED

						SHL		BX,1
						MOV		AX,CS:[KEYBUF+BX]

						POPF
						POP		BX
						CLC
						RET

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ERROR_CODE				DB		0
ERROR_DETAIL			DW		0

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_00H_INIT:
						CLD

						XOR		AX,AX

						PUSH	CS
						POP		ES
						MOV		DI,KEYBUF
						MOV		CX,KEYBUF_LEN
						REP		STOSB

						MOV		DI,KEY_MATRIX
						MOV		CX,KEY_MATRIX_LEN
						REP		STOSB

						MOV		CS:[BIOS_CODE_SYSTEM],AX
						MOV		CS:[KEYBUF_WRITEPTR],AX
						MOV		CS:[KEYBUF_READPTR],AX
						MOV		CS:[KEYBUF_DATA_FIRST_BYTE],AL

						MOV		CS:[INT41H_INT_DATABLOCK+4],CS
						PUSH	CS
						POP		DS
						MOV		DI,INT41H_INT_DATABLOCK
						; AH is still zero
						MOV		DL,1
						INT		0AEH

						PUSH	EAX
						MOV		DI,SS
						MOV		DS,DI
						MOV		DI,SP
						MOV		AH,03H	; Get INT-Enabled Flags
						INT		0AEH

						MOV		EAX,DS:[DI]
						OR		EAX,INTMANBIOS_INT01_FLAG
						MOV		DS:[DI],EAX

						MOV		AH,02H	; Set INT-Enabled Flags
						INT		0AEH

						POP		EAX

						MOV		AL,1
						MOV		DX,IO_KEYBOARD_INT_CONTROL
						OUT		DX,AL

						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_01H_SET_BUFFERING:
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_02H_SET_CODE_SYSTEM:
						MOV		DX,[BP+SAVED_EDX]
						MOV		CS:[BIOS_CODE_SYSTEM],DX
						MOV		BYTE [BP+SAVED_EAX+1],0

						XOR		AX,AX
						MOV		CS:[KEYBUF_WRITEPTR],AX
						MOV		CS:[KEYBUF_READPTR],AX
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_03H_GET_CODE_SYTEM:
						MOV		DX,CS:[BIOS_CODE_SYSTEM]
						MOV		[BP+SAVED_EDX],DX
						MOV		BYTE [BP+SAVED_EAX+1],0
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_04H_CONTROL_KEYBOARD_LOCK:
						MOV		AL,[BP+SAVED_EAX]
						MOV		CS:[BIOS_KEY_LOCK],AL
						MOV		BYTE [BP+SAVED_EAX+1],0
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_05H_CONTROL_CLICK_SOUND:
						MOV		BYTE [BP+SAVED_EAX+1],0
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_06H_CLEAR_BUFFER:
						XOR		AX,AX
						MOV		CS:[KEYBUF_WRITEPTR],AX
						MOV		CS:[KEYBUF_READPTR],AX
						MOV		BYTE [BP+SAVED_EAX+1],0
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_07H_CHECK_INPUT:
						STI

						MOV		AX,CS:[KEYBUF_WRITEPTR]
						SUB		AX,CS:[KEYBUF_READPTR]
						AND		AX,KEYBUF_LEN_MASK
						MOV		[BP+SAVED_EAX],AL

						MOV		BYTE [BP+SAVED_EDX+1],0FFH	; Tentatively no input
						CALL	PEEK_KEYBUF
						JC		INT90H_EXIT

						JMP		INT90H_09H_HAVE_KEY

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_08H_READ_SHIFT_KEY:
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_09H_READ:
						STI
						MOV		AX,[BP+SAVED_EAX]
						OR		AL,AL
						JNE		INT90H_09H_READ_NONBLOCKING

INT90H_09H_READ_BLOCKING:
						CALL	READ_KEYBUF
						JC		INT90H_09H_READ_BLOCKING
						JMP		INT90H_09H_HAVE_KEY

INT90H_09H_READ_NONBLOCKING:
						CALL	READ_KEYBUF
						MOV		BYTE [BP+SAVED_EDX+1],0FFH	; Tentatively no input
						JC		INT90H_EXIT

INT90H_09H_HAVE_KEY:
						; AL is key-address (b7 is always 0)
						; AH b0 Right Thumb Shift   b1 Left Thumb Shift  b2 SHIFT  b3 CTRL  b4 0 Make or 1 Break  b5,b6 Keyboard Type
						MOV		SI,CS:[BIOS_CODE_SYSTEM]
						AND		SI,BIOS_CODESYS_MODE_MASK


						MOV		[BP+SAVED_EBX+1],AL  ; BH is key address

						CMP		SI,BIOS_MODE_ENCODE
						JE		INT90H_09H_RETURN_ENCODE

INT90H_09H_RETURN_SCANCODE:
						MOV		CH,AH
						SHL		CH,3
						AND		CH,80H
						OR		CH,AL
						JMP		INT90H_09H_RETURN_DL_SET
INT90H_09H_RETURN_ENCODE:
						MOVZX	BX,AH
						AND		BL,4
						SHL		BL,5	; Make it b7
						OR		BL,AL
						MOV		CH,CS:[KEYCODE_TO_ASCII+BX]

INT90H_09H_RETURN_DL_SET:
						MOV		[BP+SAVED_EDX],CH	; DL will be Key address plus make/break information

						MOV		CL,AH
						AND		CL,3	; Thumb-Shift Flags
						SHL		CL,5	; Move Thumb-Shift Flags to b5 and b6

						MOV		CH,AH
						AND		CH,8	; CTRL
						SHL		CH,1
						OR		CL,CH

						MOV		CH,AH
						AND		CH,4	; SHIFT
						OR		CL,CH

						; How can I get CAPS and KANA?

						MOV		[BP+SAVED_EBX],CL

						MOV		BYTE [BP+SAVED_EDX+1],0	; Indicate there is key input

						; Supposed to be  BH=Key Address (0 to 7Fh), b0 CAPs lock, b1 Kana lock, b2 Shift, b3 Graph(always 0 in towns)
						;                 b4 Ctrl, b5 Right Thumb Shift,  b6 Left Thumb Shift
						; BH is zero if the key code was programatically added.

						JMP		INT90H_EXIT


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_0AH_MATRIX_INPUT:
						PUSH	DS
						POP		ES

						PUSH	CS
						POP		DS
						MOV		SI,KEY_MATRIX

						CLD

						MOVSD
						MOVSD
						MOVSD
						MOVSD

						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_0BH_ADD_INPUT_STRING:
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_0CH_REGISTER_PFKEY_INT_HANDLER:
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_0DH_GET_PFKEY_INT_HANDLER:
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_0EH_KEY_ASSIGNMENT:
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INT90H_0FH_READ_KEY_STATE:
						JMP		INT90H_EXIT

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

